<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ESP8266连接阿里云</title>
      <link href="/2020/09/09/ESP8266%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91/"/>
      <url>/2020/09/09/ESP8266%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91/</url>
      
        <content type="html"><![CDATA[<h2 id="基于Arduino平台用ESP8266接入阿里云"><a href="#基于Arduino平台用ESP8266接入阿里云" class="headerlink" title="基于Arduino平台用ESP8266接入阿里云"></a>基于Arduino平台用ESP8266接入阿里云</h2><p>前面在零基础快速学习Android开发的两篇博客里介绍了基于EMQ搭建自己的MQTT服务器，是免费使用的，而想使用阿里云的MQTT服务器应该是要购买阿里云的云服务，才能使用阿里云物联网管理平台，目前因为是学生，加上今年上半年疫情原因，阿里云针对学生开放免费半年的使用期限，可能我知道的比较晚，申请完只有两个月免费使用，但了解了解阿里云也足够了，具体操作可以搜B站视频，<a href="https://www.bilibili.com/video/BV1az4y197fK?from=search&seid=6530214970607404239" target="_blank" rel="noopener">阿里云白嫖一年免费服务器？学生党专属福利！阿里云在家实践活动</a>。</p><a id="more"></a><h3 id="1-ESP8266-Arduino开发环境的搭建"><a href="#1-ESP8266-Arduino开发环境的搭建" class="headerlink" title="1.ESP8266 Arduino开发环境的搭建"></a>1.ESP8266 Arduino开发环境的搭建</h3><h4 id="1-1-下载Arduino"><a href="#1-1-下载Arduino" class="headerlink" title="1.1 下载Arduino"></a>1.1 下载Arduino</h4><p>官网链接：<a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="noopener">Download the Arduino IDE</a></p><h4 id="1-2-安装Arduino"><a href="#1-2-安装Arduino" class="headerlink" title="1.2 安装Arduino"></a>1.2 安装Arduino</h4><p>安装步骤参考百度，教程一搜一大把…</p><h4 id="1-3-配置ESP8266环境"><a href="#1-3-配置ESP8266环境" class="headerlink" title="1.3 配置ESP8266环境"></a>1.3 配置ESP8266环境</h4><p>在Arduino中针对ESP8266的基本配置这里不多做介绍，主要介绍ESP8266接入阿里云需要哪些东西。</p><h5 id="1-3-1-安装PubSubClient库"><a href="#1-3-1-安装PubSubClient库" class="headerlink" title="1.3.1 安装PubSubClient库"></a>1.3.1 安装PubSubClient库</h5><p>打开<strong>工具-&gt;管理库</strong>，搜索<code>PubSubClient</code>，安装最新版本即可。</p><p><img src="https://s1.ax1x.com/2020/09/09/w3p81K.png" alt></p><h5 id="1-3-2-安装ArduinoJson库"><a href="#1-3-2-安装ArduinoJson库" class="headerlink" title="1.3.2 安装ArduinoJson库"></a>1.3.2 安装ArduinoJson库</h5><p>打开<strong>工具-&gt;管理库</strong>，搜索<code>ArduinoJson</code>，安装 5 版本，选择任意一个均可。</p><p><img src="https://s1.ax1x.com/2020/09/09/w3p3p6.png" alt></p><h5 id="1-3-3-安装Crypto库"><a href="#1-3-3-安装Crypto库" class="headerlink" title="1.3.3 安装Crypto库"></a>1.3.3 安装Crypto库</h5><p>打开<strong>工具-&gt;管理库</strong>，搜索<code>Crypto</code>，安装最新版本即可。这是个加密函数库，里面包含了<code>SHA256.h</code>，是加密功能的头文件。</p><p><img src="https://s1.ax1x.com/2020/09/09/w3plfx.png" alt></p><h3 id="2-阿里云物联网平台的配置"><a href="#2-阿里云物联网平台的配置" class="headerlink" title="2.阿里云物联网平台的配置"></a>2.阿里云物联网平台的配置</h3><p>进入<a href="https://help.aliyun.com/product/30520.html" target="_blank" rel="noopener">阿里云物联网平台</a>官网，点击<strong>控制台-&gt;物联网管理平台</strong>。</p><p><img src="https://s1.ax1x.com/2020/09/09/w3pJXD.png" alt></p><p><img src="https://s1.ax1x.com/2020/09/09/w3pG6O.png" alt></p><p><img src="https://s1.ax1x.com/2020/09/09/w3ptne.png" alt></p><p>点击<strong>设备管理-&gt;产品-&gt;创建产品</strong>，创建一个控制ESP8266开发板上LED灯的产品。</p><p><img src="https://s1.ax1x.com/2020/09/09/w3pN0H.png" alt></p><p>点击<strong>设备管理-&gt;设备-&gt;添加设备</strong>，设备所属产品选择上一步创建的产品，给设备取合适的名字和备注，添加完成后在设备列表中显示有刚才添加的设备，但状态/启用状态为未激活状态。</p><p><img src="https://s1.ax1x.com/2020/09/09/w3pU7d.png" alt></p><p>下面进行ESP8266程序的配置。</p><h3 id="3-ESP8266程序配置"><a href="#3-ESP8266程序配置" class="headerlink" title="3.ESP8266程序配置"></a>3.ESP8266程序配置</h3><h4 id="3-1-修改WIFI名称和密码"><a href="#3-1-修改WIFI名称和密码" class="headerlink" title="3.1 修改WIFI名称和密码"></a>3.1 修改WIFI名称和密码</h4><p>将程序中<code>WIFI_SSID</code>、<code>WIFI_PASSWD</code>的宏定义改成自己的WIFI。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIFI_SSID      <span class="meta-string">"TP-LINK_531"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIFI_PASSWD    <span class="meta-string">"zhoulianying531"</span></span></span><br></pre></td></tr></table></figure><h4 id="3-2-修改设备信息"><a href="#3-2-修改设备信息" class="headerlink" title="3.2 修改设备信息"></a>3.2 修改设备信息</h4><p>将程序中<code>PRODUCT_KEY</code>、<code>DEVICE_NAME</code>、<code>DEVICE_SECRET</code>的宏定义改成想要链接的设备信息，这里改成上述步骤创建的设备信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRODUCT_KEY      <span class="meta-string">"a1qBJBdexnM"</span> <span class="comment">//替换自己的PRODUCT_KEY</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME      <span class="meta-string">"LED_control"</span> <span class="comment">//替换自己的DEVICE_NAME</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_SECRET    <span class="meta-string">"b3a3fa8711aa2cd1e7ea21f34336e55d"</span><span class="comment">//替换自己的DEVICE_SECRET</span></span></span><br></pre></td></tr></table></figure><p>点击设备后面的<strong>操作-&gt;查看</strong>，即可看到需要的设备信息。</p><p><img src="https://s1.ax1x.com/2020/09/09/w3pdAA.png" alt></p><blockquote><p>至此，需要配置的地方全部完成。</p></blockquote><p>上述信息修改完成后，上传到ESP8266开发板上，打开Arduino的串口监视器，即可看到ESP82666上传到阿里云的信息。</p><img src="https://s1.ax1x.com/2020/09/09/w3pwtI.png" style="zoom: 67%;"><p>回到阿里云物联网平台，即可看到刚创建的设备状态显示为<strong>在线</strong>。</p><p><img src="https://s1.ax1x.com/2020/09/09/w3p0ht.png" alt></p><p>点击<strong>监控运维-&gt;在线调试</strong>可对设备进行远程控制，此处可以控制ESP8266上面LED灯的亮灭。</p><p><img src="https://s1.ax1x.com/2020/09/09/w3psc8.png" alt></p><p>设备正常运行，阿里云连接成功！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>零基础快速学习Android开发（五）</title>
      <link href="/2020/09/05/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0Android%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2020/09/05/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0Android%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="MQTT服务器的搭建——基于EMQ平台（Windows）"><a href="#MQTT服务器的搭建——基于EMQ平台（Windows）" class="headerlink" title="MQTT服务器的搭建——基于EMQ平台（Windows）"></a>MQTT服务器的搭建——基于EMQ平台（Windows）</h2><p>前面一篇博客介绍了在Linux系统上基于EMQ平台搭建了MQTT服务器，这两天在测试连接过程中遇到问题，主要还是笔记本不行…开虚拟机太太太卡了，索性放弃，重新在台式机Windows系统上搭建MQTT服务器，成功之后发现也挺好用，测试啥的都很方便。下面直接介绍安装和测试过程，对EMQ、MQTT不做介绍。</p><a id="more"></a><p>EMQ官网：<a href="https://www.emqx.io/cn" target="_blank" rel="noopener">https://www.emqx.io/cn</a></p><p>官方介绍文档：<a href="https://docs.emqx.net/broker/v3/cn/install.html" target="_blank" rel="noopener">https://docs.emqx.net/broker/v3/cn/install.html</a></p><blockquote><p>登录官网可下载EMQ X安装包</p><p>官方介绍文档里有针对各种系统的安装步骤，但不够详细，只参考这个进行安装可能会出现各种问题，所有有事儿还是得找百度~</p></blockquote><h3 id="1-在Windows下安装EMQ-X-Broker"><a href="#1-在Windows下安装EMQ-X-Broker" class="headerlink" title="1.在Windows下安装EMQ X Broker"></a>1.在Windows下安装EMQ X Broker</h3><h4 id="1-1-下载EMQ-X安装包"><a href="#1-1-下载EMQ-X安装包" class="headerlink" title="1.1 下载EMQ X安装包"></a>1.1 下载EMQ X安装包</h4><p>同样，先下载安装包，上链接 -&gt; <a href="https://www.emqx.io/cn/downloads#broker" target="_blank" rel="noopener">EMQ X Broker</a></p><p>打开下载链接后选择版本，例如我选择目前的最新版v4.1.4，选择Windows/Windows/x86_64/zip。</p><img src="https://s1.ax1x.com/2020/09/05/wEWf5d.png" style="zoom:80%;"><p>下载完成进行解压，我直接解压到E盘，软件包里即包含如下文件，注意EMQ的存放路径<strong>不能有中文和空格</strong>。</p><img src="https://s1.ax1x.com/2020/09/05/wEW4PA.png" style="zoom:80%;"><h4 id="1-2-安装EMQ-X-Broker"><a href="#1-2-安装EMQ-X-Broker" class="headerlink" title="1.2 安装EMQ X Broker"></a>1.2 安装EMQ X Broker</h4><p>使用管理员身份运行<code>cmd</code>命令窗口，跳转到<code>emqx</code>的存放路径下的<code>/bin</code>文件夹路径。</p><p><img src="https://s1.ax1x.com/2020/09/05/wEWdUJ.png" alt></p><p>输入命令<code>emqx install</code>，安装emq。</p><p><img src="https://s1.ax1x.com/2020/09/05/wEWNbF.png" alt></p><p>输入命令<code>emqx start</code>，启动emq，若路径跳转到<code>/emqx</code>文件夹下，表明启动成功，若后续继续使用命令行输入，还需要跳转到<code>/bin</code>目录下。</p><p><img src="https://s1.ax1x.com/2020/09/05/wEWYuT.png" alt></p><p>然后可以使用命令<code>emqx_ctl status</code>查看emqx的状态。</p><p><img src="https://s1.ax1x.com/2020/09/05/wEWtDU.png" alt></p><p>如果要停止 EMQ X Broker，使用如下命令<code>emqx stop</code>，提示ok即停止。</p><p><img src="https://s1.ax1x.com/2020/09/05/wEWGvV.png" alt></p><h4 id="1-3-验证"><a href="#1-3-验证" class="headerlink" title="1.3 验证"></a>1.3 验证</h4><p>完成以上步骤，EMQ应该已经成功启动，下面进行验证。</p><p>打开浏览器，输入<a href="http://localhost:18083/" target="_blank" rel="noopener">http://localhost:18083</a> 来查看 <code>Dashboard</code>，默认用户名是 <code>admin</code>，密码是 <code>public</code>。</p><img src="https://s1.ax1x.com/2020/09/05/wEWaE4.png" style="zoom:67%;"><p><img src="https://s1.ax1x.com/2020/09/05/wEWBCR.png" alt></p><p>能进入控制台，即表示EMQ安装成功！</p><h3 id="2-数据交互测试"><a href="#2-数据交互测试" class="headerlink" title="2.数据交互测试"></a>2.数据交互测试</h3><h4 id="2-1-利用MQTTBox进行测试"><a href="#2-1-利用MQTTBox进行测试" class="headerlink" title="2.1 利用MQTTBox进行测试"></a>2.1 利用MQTTBox进行测试</h4><p>MQTTBox测试工具下载链接：<a href="http://workswithweb.com/mqttbox.html" target="_blank" rel="noopener">http://workswithweb.com/mqttbox.html</a></p><p>使用MQTTBox工具测试MQTT服务器能否正常通信，自定义发布主题和订阅主题，安装完成后打开，点击主页的<code>Creat MQTT Client</code>创建一个MQTT客户端，信息填写如下图所示。</p><p><img src="https://s1.ax1x.com/2020/09/05/wEWw59.png" alt></p><p>保存之后自动显示<code>Connected</code>，即连接成功，到控制台刷新可以看到刚创建的MQTT客户端信息。</p><p><img src="https://s1.ax1x.com/2020/09/05/wEWrgx.png" alt></p><p>MQTTBox连接上MQTT服务器后，进行订阅和发布主题。</p><p><img src="https://s1.ax1x.com/2020/09/05/wEWD81.png" alt></p><h4 id="2-2-控制台Websocket连接"><a href="#2-2-控制台Websocket连接" class="headerlink" title="2.2 控制台Websocket连接"></a>2.2 控制台Websocket连接</h4><p>注意主机地址和端口需填写正确，主机地址为127.0.0.1，Websocket做MQTT连接时端口应该为8083。</p><p><img src="https://s1.ax1x.com/2020/09/05/wEWsv6.png" alt></p><h4 id="2-3-订阅和发布消息测试"><a href="#2-3-订阅和发布消息测试" class="headerlink" title="2.3  订阅和发布消息测试"></a>2.3  订阅和发布消息测试</h4><p>连接成功后，订阅主题和发布消息进行测试，Websocket和MQTTBox一个发一个收，两两可以互相发送和接收消息，之前MQTTBox发布的主题为publish，订阅的主题为subscribe，所以Websocket这里就应该订阅MQTTBox发布的主题publish，向subscribe主题发送消息（即subscribe相当于Websocket的发布主题），设置如下：</p><img src="https://s1.ax1x.com/2020/09/05/wEW6KK.png" style="zoom:80%;"><p>在MQTTBox上发布一条消息<code>hello world</code>，然后在控制台的订阅消息列表可以看到刚才从MQTTBox发布的消息。</p><img src="https://s1.ax1x.com/2020/09/05/wEWcDO.png" style="zoom:80%;"><img src="https://s1.ax1x.com/2020/09/05/wEWgbD.png" style="zoom:80%;"><p>从Websocket发送一条消息<code>How are you</code>，然后再MQTTBox工具的订阅列表中可以看到。</p><img src="https://s1.ax1x.com/2020/09/05/wEWRVe.png" style="zoom:80%;"><img src="https://s1.ax1x.com/2020/09/05/wEWWUH.png" style="zoom:80%;"><p>MQTT服务器能正常发布、订阅消息，即在Windows上搭建成功！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决VMware打开报错的问题</title>
      <link href="/2020/08/27/%E8%A7%A3%E5%86%B3VMware%E6%89%93%E5%BC%80%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/27/%E8%A7%A3%E5%86%B3VMware%E6%89%93%E5%BC%80%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h5 id="VMware提示以独占方式锁定此配置文件失败。另一个正在运行的VMware进程可能正在使用配置文件"><a href="#VMware提示以独占方式锁定此配置文件失败。另一个正在运行的VMware进程可能正在使用配置文件" class="headerlink" title="VMware提示以独占方式锁定此配置文件失败。另一个正在运行的VMware进程可能正在使用配置文件"></a>VMware提示以独占方式锁定此配置文件失败。另一个正在运行的VMware进程可能正在使用配置文件</h5><p>前两天使用了VMware虚拟机，正常关闭后，今天再次打开虚拟机的时候提示异常“以独占方式锁定此配置文件失败”，查阅网上的说法，是之前虚拟机未被正常关机，有进程仍然在后台运行占用了配置文件，导致再次开启机器时提示异常。</p><p>下面是我在网上找的解决办法，亲测有用！！！</p><a id="more"></a><h3 id="通过禁用启动项的方式结束旧的进程占用"><a href="#通过禁用启动项的方式结束旧的进程占用" class="headerlink" title="通过禁用启动项的方式结束旧的进程占用"></a>通过禁用启动项的方式结束旧的进程占用</h3><ul><li>按“win +R”组合键，进入“运行”，输入<code>msconfig</code>，按回车键。</li></ul><img src="https://s1.ax1x.com/2020/08/27/df2NKU.png" style="zoom:80%;"><ul><li>进入“系统配置”，选中“服务”，勾选左下角“隐藏所有Microsoft服务”，再打开“全部禁止”，打开“应用”。</li></ul><img src="https://s1.ax1x.com/2020/08/27/df2wVJ.png" style="zoom:80%;"><ul><li>再打开“服务”边上的“启动”选项，打开“点击任务管理器”。</li></ul><img src="https://s1.ax1x.com/2020/08/27/df2UrF.png" style="zoom:80%;"><ul><li>在列出的启动项上，找到<code>VMware Tray Process</code>点击右键，选中“禁止”，禁止全部启动项。</li></ul><img src="https://s1.ax1x.com/2020/08/27/df2ab4.png" style="zoom:80%;"><ul><li>关闭“任务管理器”，返回“系统配置”界面下打开“确定”，依据提示重启电脑。</li></ul><img src="https://s1.ax1x.com/2020/08/27/df2YvT.png" style="zoom:80%;"><ul><li>电脑重启之后，再次按照上面流程启动所有服务和<code>VMware Tray Process</code>，VMware就可以正常启动了。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ESP8266+BME280构建无线气象站</title>
      <link href="/2020/08/25/ESP8266+BME280%E6%9E%84%E5%BB%BA%E6%97%A0%E7%BA%BF%E6%B0%94%E8%B1%A1%E7%AB%99/"/>
      <url>/2020/08/25/ESP8266+BME280%E6%9E%84%E5%BB%BA%E6%97%A0%E7%BA%BF%E6%B0%94%E8%B1%A1%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本案例是做一个简单的气象站，进行温度、湿度、压力、高度的测量。气压传感器模块有GY-68 BMP180 可以测大气压和温度，升级版是GY-BMP280，还有高配版BME280，可以多测一个湿度。</p><p>本案例展示了如何将BME280传感器模块与ESP8266一起使用，以使用Arduino IDE读取压力、温度、湿度、压力和估计高度。BME280传感器使用I2C或SPI通信协议与微控制器交换数据。</p><a id="more"></a><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><h4 id="1-1-BME280传感器"><a href="#1-1-BME280传感器" class="headerlink" title="1.1 BME280传感器"></a>1.1 BME280传感器</h4><p>BME280传感器使用I2C或SPI通信协议进行通信，我使用的是I2C通信协议进行通信，接线非常简单，使用默认的ESP8266 I2C引脚，如下表所示：</p><table><thead><tr><th align="center">BME280</th><th align="center">ESP8266</th></tr></thead><tbody><tr><td align="center">VCC</td><td align="center">3.3V</td></tr><tr><td align="center">GND</td><td align="center">GND</td></tr><tr><td align="center">SCL</td><td align="center">GPIO5 (D1)</td></tr><tr><td align="center">SDA</td><td align="center">GPIO4 (D2)</td></tr></tbody></table><p><img src="https://s1.ax1x.com/2020/08/26/d2rWO1.png" alt></p><h4 id="1-2-所需硬件"><a href="#1-2-所需硬件" class="headerlink" title="1.2 所需硬件"></a>1.2 所需硬件</h4><ul><li>ESP8266开发板 x 1</li><li>BME280传感器模块 x 1</li><li>杜邦线 x 4</li></ul><h4 id="1-3-硬件接线图"><a href="#1-3-硬件接线图" class="headerlink" title="1.3 硬件接线图"></a>1.3 硬件接线图</h4><p>ESP8266与BME280传感器模块使用I2C通信。为此，将传感器连接到ESP8266 <code>SDA</code> 和 <code>SCL</code> 引脚，如下图所示。</p><img src="https://s1.ax1x.com/2020/08/26/d2rRyR.png" style="zoom: 80%;"><h3 id="2-安装库文件"><a href="#2-安装库文件" class="headerlink" title="2. 安装库文件"></a>2. 安装库文件</h3><p>该案例的ESP8266固件是使用Arduino IDE开发的。要从BME280传感器模块获取读数，需要安装<a href="https://github.com/adafruit/Adafruit_BME280_Library" target="_blank" rel="noopener">Adafruit_BME280库</a>。打开Arduino IDE并转到 <strong>工具</strong> &gt;<strong>管理库</strong>，在搜索框中搜索<code>adafruit bme280</code>并安装该库。</p><img src="https://s1.ax1x.com/2020/08/26/d2rgSJ.png" style="zoom:80%;"><p>还需要安装<a href="https://github.com/adafruit/Adafruit_Sensor" target="_blank" rel="noopener">Adafruit_Sensor库</a>。打开Arduino IDE并转到 <strong>工具</strong> &gt;<strong>管理库</strong>，在搜索框中搜索<code>Adafruit Unified Sensor</code>并安装该库。</p><img src="https://s1.ax1x.com/2020/08/26/d2r2l9.png" style="zoom:80%;"><p>安装完成后，重新启动Arduino IDE。</p><h3 id="3-工程代码"><a href="#3-工程代码" class="headerlink" title="3. 工程代码"></a>3. 工程代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Wire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Adafruit_Sensor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Adafruit_BME280.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SSD1306.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEALEVELPRESSURE_HPA (1013.25)</span></span><br><span class="line"></span><br><span class="line">Adafruit_BME280 bme; <span class="comment">// I2C</span></span><br><span class="line"><span class="function">SSD1306  <span class="title">display</span><span class="params">(<span class="number">0x3c</span>, D2, D1)</span></span>;</span><br><span class="line"><span class="comment">// Replace with your network details</span></span><br><span class="line"><span class="comment">//const char* ssid = "Xiaomi_wifi";</span></span><br><span class="line"><span class="comment">//const char* password = "18712183610";</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ssid = <span class="string">"TP-LINK"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* password = <span class="string">"20070529"</span>;</span><br><span class="line"><span class="keyword">float</span> h, t, p, pin;</span><br><span class="line"><span class="keyword">char</span> temperatureFString[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">char</span> humidityString[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">char</span> pressureString[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">char</span> pressureInchString[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Web Server on port 80</span></span><br><span class="line"><span class="function"><span class="built_in">WiFiServer</span> <span class="title">server</span><span class="params">(<span class="number">80</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// only runs once on boot</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Initializing serial port for debugging purposes</span></span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">Wire</span>.<span class="built_in">begin</span>(D2, D1);</span><br><span class="line">  <span class="built_in">Wire</span>.setClock(<span class="number">100000</span>);</span><br><span class="line">  <span class="comment">// Connecting to WiFi network</span></span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>();</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">print</span>(<span class="string">"Connecting to "</span>);</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(ssid);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">WiFi</span>.<span class="built_in">begin</span>(ssid, password);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">WiFi</span>.status() != WL_CONNECTED) &#123;</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">print</span>(<span class="string">"."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">""</span>);</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">"WiFi connected"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Starting the web server</span></span><br><span class="line">  server.<span class="built_in">begin</span>();</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">"Web server running. Waiting for the ESP IP..."</span>);</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">10000</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Printing the ESP IP address</span></span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="built_in">WiFi</span>.<span class="built_in">localIP</span>());</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(F(<span class="string">"BME280 test"</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> status;</span><br><span class="line">  status = bme.<span class="built_in">begin</span>(<span class="number">0x76</span>); </span><br><span class="line">  <span class="keyword">if</span> (!status) &#123;</span><br><span class="line"><span class="comment">//  if (!bme.begin()) &#123;</span></span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">"Could not find a valid BME280 sensor, check wiring!"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// Initialising the UI will init the display too.</span></span><br><span class="line">  <span class="built_in">display</span>.init();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">display</span>.flipScreenVertically();</span><br><span class="line">  <span class="built_in">display</span>.setFont(ArialMT_Plain_16);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getWeather</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    h = bme.readHumidity();</span><br><span class="line">    t = bme.<span class="built_in">readTemperature</span>();</span><br><span class="line">    <span class="comment">//t = t*1.8+32;</span></span><br><span class="line">    p = bme.readPressure()/<span class="number">100.0F</span>;</span><br><span class="line">    pin = <span class="number">0.02953</span>*p;</span><br><span class="line">    dtostrf(t, <span class="number">5</span>, <span class="number">1</span>, temperatureFString);</span><br><span class="line">    dtostrf(h, <span class="number">5</span>, <span class="number">1</span>, humidityString);</span><br><span class="line">    dtostrf(p, <span class="number">6</span>, <span class="number">1</span>, pressureString);</span><br><span class="line">    dtostrf(pin, <span class="number">5</span>, <span class="number">2</span>, pressureInchString);</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// runs over and over again</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Listenning for new clients</span></span><br><span class="line">  <span class="built_in">WiFiClient</span> client = server.<span class="built_in">available</span>();</span><br><span class="line">  <span class="keyword">if</span> (client) &#123;</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">"New client"</span>);</span><br><span class="line">    <span class="comment">// bolean to locate when the http request ends</span></span><br><span class="line">    <span class="keyword">boolean</span> blank_line = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (client.<span class="built_in">connected</span>()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (client.<span class="built_in">available</span>()) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = client.<span class="built_in">read</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'\n'</span> &amp;&amp; blank_line) &#123;</span><br><span class="line">            getWeather();</span><br><span class="line">            client.<span class="built_in">println</span>(<span class="string">"HTTP/1.1 200 OK"</span>);</span><br><span class="line">            client.<span class="built_in">println</span>(<span class="string">"Content-Type: text/html"</span>);</span><br><span class="line">            client.<span class="built_in">println</span>(<span class="string">"Connection: close"</span>);</span><br><span class="line">            client.<span class="built_in">println</span>();</span><br><span class="line">            <span class="comment">// your actual web page that displays temperature</span></span><br><span class="line">            client.<span class="built_in">println</span>(<span class="string">"&lt;!DOCTYPE HTML&gt;"</span>);</span><br><span class="line">            client.<span class="built_in">println</span>(<span class="string">"&lt;html&gt;"</span>);</span><br><span class="line">            client.<span class="built_in">println</span>(<span class="string">"&lt;head&gt;&lt;META HTTP-EQUIV=\"refresh\" CONTENT=\"15\"&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;ESP8266 Weather Webserver&lt;/h1&gt;&lt;h3&gt;Temperature = "</span>);</span><br><span class="line">            client.<span class="built_in">println</span>(temperatureFString);</span><br><span class="line">            <span class="comment">//client.println("&amp;deg;F&lt;/h3&gt;&lt;h3&gt;Humidity = ");</span></span><br><span class="line">            client.<span class="built_in">println</span>(<span class="string">"&amp;deg;C&lt;/h3&gt;&lt;h3&gt;Humidity = "</span>);</span><br><span class="line">            client.<span class="built_in">println</span>(humidityString);</span><br><span class="line">            client.<span class="built_in">println</span>(<span class="string">"%&lt;/h3&gt;&lt;h3&gt;Pressure = "</span>);</span><br><span class="line">            client.<span class="built_in">println</span>(pressureString);</span><br><span class="line">            client.<span class="built_in">println</span>(<span class="string">"hPa ("</span>);</span><br><span class="line">            client.<span class="built_in">println</span>(pressureInchString);</span><br><span class="line">            client.<span class="built_in">println</span>(<span class="string">"Inch)&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;"</span>);  </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'\n'</span>) &#123;</span><br><span class="line">          <span class="comment">// when starts reading a new line</span></span><br><span class="line">          blank_line = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c != <span class="string">'\r'</span>) &#123;</span><br><span class="line">          <span class="comment">// when finds a character on the current line</span></span><br><span class="line">          blank_line = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// closing the client connection</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1</span>);</span><br><span class="line">    client.<span class="built_in">stop</span>();</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">"Client disconnected."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">    getWeather();</span><br><span class="line">    <span class="built_in">display</span>.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="comment">//display.drawString(10, 6, "T="+String(t)+"°F");</span></span><br><span class="line">    <span class="built_in">display</span>.drawString(<span class="number">10</span>, <span class="number">6</span>, <span class="string">"T="</span>+<span class="keyword">String</span>(t)+<span class="string">"°C"</span>);</span><br><span class="line">    <span class="built_in">display</span>.drawString(<span class="number">10</span>, <span class="number">23</span>, <span class="string">"P="</span>+<span class="keyword">String</span>(p)+<span class="string">"hPa"</span>);</span><br><span class="line">    <span class="built_in">display</span>.drawString(<span class="number">10</span>, <span class="number">40</span>, <span class="string">"RH="</span>+<span class="keyword">String</span>(h)+<span class="string">"%"</span>);</span><br><span class="line">    <span class="built_in">display</span>.drawRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">127</span>, <span class="number">63</span>);</span><br><span class="line">    <span class="built_in">display</span>.drawRect(<span class="number">1</span>, <span class="number">1</span>, <span class="number">125</span>, <span class="number">61</span>);</span><br><span class="line">    <span class="built_in">display</span>.drawRect(<span class="number">2</span>, <span class="number">2</span>, <span class="number">124</span>, <span class="number">60</span>);</span><br><span class="line">    <span class="built_in">display</span>.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">print</span>(<span class="string">"Temperature = "</span>);</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">print</span>(bme.<span class="built_in">readTemperature</span>());</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">" °C"</span>);</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">print</span>(<span class="string">"Pressure = "</span>);</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">print</span>(bme.readPressure() / <span class="number">100.0F</span>);</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">" hPa"</span>);</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">print</span>(<span class="string">"Approx.Altitude = "</span>);</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">print</span>(bme.readAltitude(SEALEVELPRESSURE_HPA));</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">" m"</span>);</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">print</span>(<span class="string">"Humidity = "</span>);</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">print</span>(bme.readHumidity());</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">" %"</span>);</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">println</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  count = count+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (count==<span class="number">10</span>) count=<span class="number">0</span>;  </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码中包含一个非常基本的HTML网页的代码，输出BME280传感器数据。要注意的是，需要在程序中编辑SSID名称和密码以使其与WiFi网络匹配，然后再将其上载到ESP8266开发板上。</p><h3 id="4-显示效果"><a href="#4-显示效果" class="headerlink" title="4. 显示效果"></a>4. 显示效果</h3><p>将程序上传到ESP8266开发板后，ESP8266重新启动，会在串行监视器上打印出WiFi网络中为其分配的本地IP地址、温度、压力、估算高度。</p><img src="https://s1.ax1x.com/2020/08/26/d2ryYF.md.png" style="zoom:80%;"><p>为了通过Web服务器访问这些数据，在连接到同一WiFi网络的任何计算机、平板电脑或手机上打开Web浏览器，然后在URL字段中输入ESP8266 IP地址，然后按Enter键。ESP8266收到客户请求后，会提供一个包含BME传感器读数的网页，如下所示。</p><p><img src="https://s1.ax1x.com/2020/08/26/d2r6W4.png" alt></p><p>参考博客：</p><ul><li><a href="https://randomnerdtutorials.com/esp8266-bme280-arduino-ide/" target="_blank" rel="noopener">使用Arduino IDE的ESP8266和BME280（压力，温度，湿度）</a></li><li><a href="http://embedded-lab.com/blog/tutorial-6-esp8266-bme280-make-localremote-weather-station/" target="_blank" rel="noopener">ESP8266和BME280创建一个本地/远程气象站</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决电脑上GitHub网站打不开的问题</title>
      <link href="/2020/08/23/%E8%A7%A3%E5%86%B3%E7%94%B5%E8%84%91%E4%B8%8AGitHub%E7%BD%91%E7%AB%99%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/23/%E8%A7%A3%E5%86%B3%E7%94%B5%E8%84%91%E4%B8%8AGitHub%E7%BD%91%E7%AB%99%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h5 id="原因：本地DNS无法解析导致的。"><a href="#原因：本地DNS无法解析导致的。" class="headerlink" title="原因：本地DNS无法解析导致的。"></a>原因：本地DNS无法解析导致的。</h5><h5 id="解决办法：修改hosts文件内容"><a href="#解决办法：修改hosts文件内容" class="headerlink" title="解决办法：修改hosts文件内容"></a>解决办法：修改hosts文件内容</h5><p>解决步骤：win10系统下操作</p><a id="more"></a><p><strong>第一步：</strong>电脑搜索<code>记事本</code>应用，以管理员身份运行，打开C盘中C:\Windows\System32\drivers\etc中的hosts文件。</p><img src="https://s1.ax1x.com/2020/08/23/ddjBp8.png" style="zoom: 80%;"><p><strong>第二步：</strong>通过站长工具找出DNS地址，进入站长工具网站的域名解析网址：<a href="https://links.jianshu.com/go?to=http%3A%2F%2Ftool.chinaz.com%2Fdns%2F" target="_blank" rel="noopener">http://tool.chinaz.com/dns/</a> ，在A类型的查询中输入github.com，找出最快的IP地址。</p><img src="https://s1.ax1x.com/2020/08/23/ddjD1S.png" style="zoom: 67%;"><p><strong>第三步：</strong>修改host文件中对应的<code>github.com</code>的IP地址。</p><p><img src="https://s1.ax1x.com/2020/08/23/ddjwff.png" alt></p><p><strong>第四步：</strong>保存host文件，即可打开GitHub网站。</p><p><em>网上有很多博客提供了解决这个问题的办法，试过几个，只有这个是适用我的，多尝试，不行就换另一种方法。</em></p><p>参考博客：<a href="https://blog.csdn.net/yuxikuo_1/article/details/107302871" target="_blank" rel="noopener">https://blog.csdn.net/yuxikuo_1/article/details/107302871</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>零基础快速学习Android开发（四）</title>
      <link href="/2020/08/23/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0Android%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2020/08/23/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0Android%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="MQTT服务器的搭建——基于EMQ平台（Linux）"><a href="#MQTT服务器的搭建——基于EMQ平台（Linux）" class="headerlink" title="MQTT服务器的搭建——基于EMQ平台（Linux）"></a>MQTT服务器的搭建——基于EMQ平台（Linux）</h2><p><a href="https://www.emqx.io/cn" target="_blank" rel="noopener">EMQ X</a> (Erlang/Enterprise/Elastic MQTT Broker) 是基于 Erlang/OTP 平台开发的开源物联网 MQTT 消息服务器。Erlang/OTP是出色的软实时 (Soft-Realtime)、低延时 (Low-Latency)、分布式 (Distributed)的语言平台。EMQ X 设计目标是实现高可靠，并支持承载海量物联网终端的MQTT连接，支持在海量物联网设备间低延时消息路由。</p><a id="more"></a><p><a href="https://docs.emqx.io/broker/latest/cn" target="_blank" rel="noopener">EMQ X Broker</a> 是基于高并发的 Erlang/OTP 语言平台开发，支持百万级连接和分布式集群架构，发布订阅模式的开源 MQTT 消息服务器。EMQ X Broker 在全球物联网市场广泛应用。无论是产品原型设计、物联网创业公司、还是大规模的商业部署，EMQ X Broker 都支持开源免费使用。</p><p>EMQ X 目前支持的操作系统:</p><table><thead><tr><th align="center">Centos6</th><th align="center">Centos7</th><th align="center">OpenSUSE tumbleweed</th></tr></thead><tbody><tr><td align="center">Debian 8</td><td align="center">Debian 9</td><td align="center">Debian 10</td></tr><tr><td align="center">Ubuntu 14.04</td><td align="center">Ubuntu 16.04</td><td align="center">Ubuntu 18.04</td></tr><tr><td align="center">macOS 10.13</td><td align="center">macOS 10.14</td><td align="center">macOS 10.15</td></tr><tr><td align="center">Windows</td><td align="center">Server 2019</td><td align="center"></td></tr></tbody></table><blockquote><p>产品部署建议 Linux 服务器，不推荐 Windows 服务器。</p><p>这是官方文档的建议，我因为看到这个建议所以选择在Linux系统中来搭建MQTT服务器，这就要求事先在电脑上装好Linux系统，安装模式和在Windows上应该差不多，大多都是命令行操作。</p><p>官方文档提供了在公众系统上安装EMQ X Broker的步骤，可供参考。</p></blockquote><h3 id="1-在Linux下安装EMQ-X-Broker"><a href="#1-在Linux下安装EMQ-X-Broker" class="headerlink" title="1.在Linux下安装EMQ X Broker"></a>1.在Linux下安装EMQ X Broker</h3><h4 id="1-1-下载EMQ-X安装包"><a href="#1-1-下载EMQ-X安装包" class="headerlink" title="1.1 下载EMQ X安装包"></a>1.1 下载EMQ X安装包</h4><p>话不多说，先上链接 -&gt; <a href="https://www.emqx.io/cn/downloads#broker" target="_blank" rel="noopener">EMQ X Broker</a></p><p>打开下载链接后选择版本，例如我选择目前的最新版v4.2-rc.1，因为我使用的Liunx系统是Ubuntu16.04，所以选择Linux/Ubutu16.04/x86_64/zip。</p><img src="https://s1.ax1x.com/2020/08/25/dyjtRs.png" style="zoom:67%;"><p>我是直接下载的安装包，然后直接将压缩包复制粘贴到Linux系统中，另一种方法可以复制下载界面的下载链接，进入Linux的<code>Terminal</code>，输入命令进行下载。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//www.emqx.io/cn/downloads/broker/v4.2-rc.1/emqx-ubuntu16.04-4.2-rc.1-x86_64.zip</span></span><br></pre></td></tr></table></figure><h4 id="1-2-启动EMQ-X-Broker"><a href="#1-2-启动EMQ-X-Broker" class="headerlink" title="1.2 启动EMQ X Broker"></a>1.2 启动EMQ X Broker</h4><p>下载完成后，使用<code>unzip命令</code>解压，如果没有安装unzip，则使用命令<code>sudo apt-get install unzip</code>安装，还有一点需要注意的是，先查看压缩包放置在哪一级目录下，再解压。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip emqx-ubuntu16<span class="number">.04</span><span class="number">-4.2</span>-rc<span class="number">.1</span>-x86_64.zip</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/08/25/dyj8Ig.png" style="zoom:67%;"><p>解压需要一点时间，解压完之后，进入解压出来的<code>emqx文件夹</code>，使用命令启动即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo .&#x2F;bin&#x2F;emqx start</span><br></pre></td></tr></table></figure><p>启动成功会提示<code>started successfully!</code>字样。</p><img src="https://s1.ax1x.com/2020/08/25/dyjJiQ.png" style="zoom:67%;"><p>然后可以使用命令查看emqx的状态。</p><p><img src="https://s1.ax1x.com/2020/08/25/dyj1Z8.png" alt></p><p>如果要停止 EMQ X Broker，使用如下命令；如果要卸载 EMQ X Broker，直接删除 EMQ X 目录即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo .&#x2F;bin&#x2F;emqx stop</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/25/dyj3dS.png" alt></p><h4 id="1-3-验证"><a href="#1-3-验证" class="headerlink" title="1.3 验证"></a>1.3 验证</h4><p>进入控制台查看，EMQ X 提供了 Dashboard 以方便用户管理设备与监控相关指标。通过 Dashboard，可以查看服务器基本信息、负载情况和统计数据，可以查看某个客户端的连接状态等信息甚至断开其连接，也可以动态加载和卸载指定插件。除此之外，EMQ X Dashboard 还提供了规则引擎的可视化操作界面，同时集成了一个简易的 MQTT 客户端工具供用户测试使用。</p><p>打开浏览器，输入<a href="http://localhost:18083/" target="_blank" rel="noopener">http://localhost:18083</a> 来查看 <code>Dashboard</code>，默认用户名是 <code>admin</code>，密码是 <code>public</code>。</p><img src="https://s1.ax1x.com/2020/08/25/dyjYGj.png" style="zoom: 67%;"><p>到此，MQTT服务器搭建成功！</p><blockquote><p>注意：在Linux下安装就要打开Linux下的浏览器查看，我在Windows的浏览器搜索半天显示不出来还以为安装过程有问题……</p></blockquote><h3 id="2-EMQ-X-Dashboard"><a href="#2-EMQ-X-Dashboard" class="headerlink" title="2.EMQ X Dashboard"></a>2.EMQ X Dashboard</h3><h4 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h4><p>EMQ X 提供了 Dashboard 以方便用户管理设备与监控相关指标。通过 Dashboard，你可以查看服务器基本信息、负载情况和统计数据，可以查看某个客户端的连接状态等信息甚至断开其连接，也可以动态加载和卸载指定插件。除此之外，EMQ X Dashboard 还提供了规则引擎的可视化操作界面，同时集成了一个简易的 MQTT 客户端工具供用户测试使用。</p><h4 id="2-2-启用-Dashboard"><a href="#2-2-启用-Dashboard" class="headerlink" title="2.2 启用 Dashboard"></a>2.2 启用 Dashboard</h4><p>EMQ X Dashboard 功能由 <a href="https://github.com/emqx/emqx-dashboard" target="_blank" rel="noopener">emqx-dashboard</a> 插件实现，该插件默认处于启用状态，它将在 EMQ X 启动时自动加载。如果你希望禁用 Dashboard 功能，你可以将 <code>data/loaded_plugins</code>（请参见 <a href="https://docs.emqx.net/broker/latest/cn/advanced/plugins.html#" target="_blank" rel="noopener">插件</a>）中的 <code>{emqx_dashboard, true}</code> 修改为 <code>{emqx_dashboard, false}</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;emqx_dashboard, true&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-查看-Dashboard"><a href="#2-3-查看-Dashboard" class="headerlink" title="2.3  查看 Dashboard"></a>2.3  查看 Dashboard</h4><p>EMQ X Dashboard 是一个 Web 应用程序，你可以直接通过浏览器来访问它，无需安装任何其他软件。当 EMQ X 成功运行在你的本地计算机上且 EMQ X Dashboard 被默认启用时，你可以访问 <a href="http://localhost:18083/" target="_blank" rel="noopener">http://localhost:18083</a> 来查看你的 Dashboard，默认用户名是 <code>admin</code>，密码是 <code>public</code>。</p><p>详细内容见此链接<a href="https://docs.emqx.net/broker/latest/cn/getting-started/dashboard.html" target="_blank" rel="noopener">Dashboard</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>零基础快速学习Android开发（三）</title>
      <link href="/2020/08/19/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0Android%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2020/08/19/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0Android%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Studio中导入jar包——导入MQTT-jar包"><a href="#Android-Studio中导入jar包——导入MQTT-jar包" class="headerlink" title="Android Studio中导入jar包——导入MQTT jar包"></a>Android Studio中导入jar包——导入MQTT jar包</h1><p>JAR 文件就是 Java Archive File，顾名思意，它的应用是与 Java 息息相关的，是 Java 的一种文档格式。JAR 文件非常类似 ZIP 文件——准确的说，它就是 ZIP 文件，所以叫它文件包。JAR（Java ARchive，Java 归档）是一种与平台无关的文件格式，可将多个文件合成一个文件。用户可将多个 Java applet 及其所需组件（.class 文件、图像和声音）绑定到 JAR 文件中，而后作为单个的简单 HTTP（Hypertext Tranfer Protocal，超文本传输协议）事务下载到浏览器中，从而大大提高下载速度。JAR 格式也支持<a href="http://www.cr173.com/k/yasuo/" target="_blank" rel="noopener">压缩</a>，从而减小了文件的大小，进一步缩短下载时间。</p><a id="more"></a><h3 id="导入jar包的方法（通用）"><a href="#导入jar包的方法（通用）" class="headerlink" title="导入jar包的方法（通用）"></a>导入jar包的方法（通用）</h3><ul><li><p>首先去下载需要的jar包，MQTT jar包<code>org.eclipse.paho.client.mqttv3-1.2.0.jar</code>。</p></li><li><p>将jar包复制到<strong>Project</strong>下的<code>app-&gt;libs</code>目录下（如果不存在libs目录新建一个）。</p></li></ul><p><img src="https://s1.ax1x.com/2020/08/20/d311XV.png" alt></p><ul><li>右击该jar包，选择<code>Add as library</code>，弹出窗口，点击OK。</li></ul><img src="https://s1.ax1x.com/2020/08/20/d31G0U.png" style="zoom:67%;"><p><img src="https://s1.ax1x.com/2020/08/20/d318mT.png" alt></p><ul><li><code>Build</code>编译完成显示<code>successful</code>即成功导入jar包。</li></ul><p><img src="https://s1.ax1x.com/2020/08/20/d33LVO.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>零基础快速学习Android开发（二）</title>
      <link href="/2020/08/17/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0Android%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/08/17/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0Android%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="控件与界面布局"><a href="#控件与界面布局" class="headerlink" title="控件与界面布局"></a>控件与界面布局</h2><p>根据B站视频建立的一个MQTT工程，以这个为例，新建一个空白工程，API选择<code>API 23:Android 6.0(Marshmaiiow)</code>（避免错误，选择和up主一样）。下面一一介绍常用控件和界面布局的方法，以及控件与界面之间的通讯、事件的发生等等。常用控件：Button（按钮）、TextView（文本框）、EditText（编辑框）、ImageView（图片）、ProgressBar（进度）、AlertDialog与ProgressDialog（弹窗）。</p><a id="more"></a><h3 id="1-Button（按钮）"><a href="#1-Button（按钮）" class="headerlink" title="1.Button（按钮）"></a>1.Button（按钮）</h3><p>默认情况下，系统会将button内的英文自动转换为大写，如果这不是你想要的效果，可以将textAllCaps属性设为false。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"确定"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">"#FFCC00"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:id</span>=<span class="string">"@+id/bt_1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第2、8行：设置按钮的大小，可将<code>wrap_content</code>（自适应大小）直接换成大小数值，如<code>100dp</code>；</li><li>第3-5行：设置文字及其属性（颜色、大小等）；</li><li>第6行：设置控件id，用来和JAVA文件通讯或者说是绑定事件的；</li><li>第7行：设置按钮的背景，可以是颜色(<a href="http://tool.c7sky.com/webcolor/" target="_blank" rel="noopener">配色表</a>)，可以是图标(<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">图标库</a>)图片，网上下载的图标必须是PNG格式，直接复制下载好的图标粘贴到项目的<strong>app-&gt;res-&gt;drawable</strong>目录下，然后替换参数；</li></ul><img src="https://s1.ax1x.com/2020/08/19/dMLbAx.png" style="zoom: 67%;"><h3 id="2-TextView（文本框）"><a href="#2-TextView（文本框）" class="headerlink" title="2.TextView（文本框）"></a>2.TextView（文本框）</h3><p>android中所有控件都有android:layout_width和android:layout_height这两个属性。这两个属性的可选值有3个：<code>match_parent，fill_parent和wrap_parent</code>。其中，match_parent和fill_parent意义相同，官方更推荐使用match_parent。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"30sp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"这是一个文本框"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/text_1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-EditText（编辑框）"><a href="#3-EditText（编辑框）" class="headerlink" title="3.EditText（编辑框）"></a>3.EditText（编辑框）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:hint</span>=<span class="string">"请输入名称"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/edit_1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:maxLines</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第3行：表示输入框中的一段提示性文本；</li><li>第5行：表示输入框中可向下拓展的最大行数，超过这个行数则会产生滚动；</li></ul><h3 id="4-ImageView（图片）"><a href="#4-ImageView（图片）" class="headerlink" title="4.ImageView（图片）"></a>4.ImageView（图片）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/img_1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:src</span>=<span class="string">"@drawable/open"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ImageView</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第4行：选择图片资源，和图标一样，粘贴到项目<strong>app-&gt;res-&gt;drawable</strong>目录下的；</li></ul><blockquote><p>以上四个是常用控件，整体效果如下，后面的控件不常用。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">"0dp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"确定"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"#FFCC00"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/bt_1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/open"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"30sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"这是一个文本框"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/text_1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"请输入名称"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/edit_1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLines</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/img_1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/open"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ImageView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SeekBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SeekBar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/08/19/dlmWM4.png" style="zoom:67%;"><h3 id="其他属性设置"><a href="#其他属性设置" class="headerlink" title="其他属性设置"></a>其他属性设置</h3><ul><li>布局方向：LinearLayout为线性布局，默认从左往右排列<code>android:orientation=&quot;horizontal&quot;</code>，可更改属性为垂直排列<code>android:orientation=&quot;vertical&quot;</code>；</li><li>居中排列：<code>android:gravity=&quot;center&quot;</code></li><li>边缘空隙：<code>android:layout_margin=&quot;20dp&quot;</code></li><li>权重（排列间隔）：<code>android:layout_weight=&quot;1&quot;</code></li><li>线性排列内部居中：<code>android:layout_gravity=&quot;center&quot;</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>零基础快速学习Android开发（一）</title>
      <link href="/2020/08/17/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0Android%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/08/17/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0Android%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Android介绍"><a href="#Android介绍" class="headerlink" title="Android介绍"></a>Android介绍</h2><p><a href="[https://baike.baidu.com/item/android%E5%BC%80%E5%8F%91/5025405?fr=aladdin](https://baike.baidu.com/item/android开发/5025405?fr=aladdin)">android开发</a>是指android平台上应用的制作，Android早期由“Android之父”之称的Andy Rubin创办，Google于2005年并购了成立仅22个月的高科技企业Android，展开了短信、手机检索、定位等业务，基于Linux的通用平台进入了开发。Android是一种基于<a href="https://baike.baidu.com/item/Linux/27050" target="_blank" rel="noopener">Linux</a>的自由及<a href="https://baike.baidu.com/item/开放源代码/114160" target="_blank" rel="noopener">开放源代码</a>的操作系统，Android 分为四个层，从高层到低层分别是应用程 序层、应用程序框架层、系统运行库层和 Linux 内核层。</p><a id="more"></a><h2 id="Android开发环境的搭建"><a href="#Android开发环境的搭建" class="headerlink" title="Android开发环境的搭建"></a>Android开发环境的搭建</h2><h3 id="1-下载并安装配置jdk"><a href="#1-下载并安装配置jdk" class="headerlink" title="1.下载并安装配置jdk"></a>1.下载并安装配置jdk</h3><h4 id="1-1下载jdk"><a href="#1-1下载jdk" class="headerlink" title="1.1下载jdk"></a>1.1下载jdk</h4><p>下载链接：<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">Java SE Downloads</a></p><h4 id="1-2安装、配置jdk"><a href="#1-2安装、配置jdk" class="headerlink" title="1.2安装、配置jdk"></a>1.2安装、配置jdk</h4><p>由于之前实习学过Java的开发，安装过jdk并在电脑上已经配置好了的，这里就不详细面熟，网上有很多安装jdk的教程，可参考其他博客，推荐博客<a href="https://www.jianshu.com/p/aaff8bb91f69" target="_blank" rel="noopener">Android Studio开发环境搭建全攻略</a>。</p><h3 id="2-下载并安装Android-Studio"><a href="#2-下载并安装Android-Studio" class="headerlink" title="2.下载并安装Android Studio"></a>2.下载并安装Android Studio</h3><h4 id="2-1下载Android-studio"><a href="#2-1下载Android-studio" class="headerlink" title="2.1下载Android studio"></a>2.1下载Android studio</h4><p>下载链接：<a href="http://www.android-studio.org/" target="_blank" rel="noopener">Android Studio</a></p><h4 id="2-2安装Android-studio"><a href="#2-2安装Android-studio" class="headerlink" title="2.2安装Android studio"></a>2.2安装Android studio</h4><p>这里遇到个问题，理论上这个界面安装时候会有<code>Android SDK</code>选项，但此处没有，先按步骤安装完程序，后面再解决这个问题。</p><p><img src="https://s1.ax1x.com/2020/08/17/dZSFsI.png" alt></p><p>点击Next，选择想要安装的路径，一路next。</p><p><img src="https://s1.ax1x.com/2020/08/17/dZSiQA.png" alt></p><p>安装完成后显示successfully。</p><p><img src="https://s1.ax1x.com/2020/08/17/dZSkLt.png" alt></p><p>安装成功后启动程序，会跳出这个对话框，如果是首次安装，选择Do not import settings，不导入之前版本的配置，如果以前安装过，且没有删除以前的配置信息，就选择Config or installation folder，然后点击OK，随后程序启动。</p><p><img src="https://s1.ax1x.com/2020/08/17/dZSWSH.png" alt></p><p><img src="https://s1.ax1x.com/2020/08/17/dZSfld.png" alt></p><p>对话框询问，是否允许谷歌收集你使用Android Studio记录信息，以此帮助他们来优化软件，可以自行选择，我选择Don’t send。</p><img src="https://s1.ax1x.com/2020/08/17/dZpIgJ.png" style="zoom:80%;"><p>显示无法访问到Android的SDK，先点击Cancel，这就是最开始提到的问题，没有安装Android SDK选项。</p><p><img src="https://s1.ax1x.com/2020/08/17/dZp534.png" alt></p><p>点击Cancel后，然后进入到了AndroidStudio的安装向导界面，点击next。</p><img src="https://s1.ax1x.com/2020/08/17/dZpov9.png" style="zoom: 67%;"><p>这里选择自定义安装，为的是后续我的SDK可以自行指定安装路径。</p><img src="https://s1.ax1x.com/2020/08/17/dZp7uR.png" style="zoom:67%;"><p>然后进入界面主题选择页面，我选择Darcula主题，喜欢亮度较高的主题可选择Light，然后点击下一步。</p><img src="https://s1.ax1x.com/2020/08/17/dZ9qMj.png" style="zoom:67%;"><p>这里需要指定SDK的本地路径，如果之前电脑中已经存在SDK，可以指定该路径，后续就可以不用下载SDK，只会更新SDK；因为我是首次安装Android Studio，所以演示本地没有安装过SDK的场景，这里可以指定一个后续保存SDK的路径。</p><img src="https://s1.ax1x.com/2020/08/17/dZ97Rg.png" style="zoom:67%;"><p>默认，下一步。</p><img src="https://s1.ax1x.com/2020/08/17/dZ9TJS.png" style="zoom:67%;"><p>点击Finish，进行安装，这一步必须保证电脑在联网状态。</p><img src="https://s1.ax1x.com/2020/08/17/dZ9HzQ.png" style="zoom:67%;"><img src="https://s1.ax1x.com/2020/08/17/dZ9oi8.png" style="zoom:67%;"><p>下载好以后，点击Finish，进入Android Studio的欢迎页面。</p><img src="https://s1.ax1x.com/2020/08/17/dZP58S.png" style="zoom:67%;"><p>至此，AndroidStudio已经安装成功。安装完成后，以建立一个Helloworld项目为例，单击上图中的Start a new Android Studio project新建一个工程，进入下面的界面。</p><img src="https://s1.ax1x.com/2020/08/17/dZPovQ.png" style="zoom:67%;"><img src="https://s1.ax1x.com/2020/08/17/dZPIgg.png" style="zoom:67%;"><h4 id="2-2-Android-studio环境变量配置"><a href="#2-2-Android-studio环境变量配置" class="headerlink" title="2.2 Android studio环境变量配置"></a>2.2 Android studio环境变量配置</h4><ul><li><p>首先右键我的电脑，点击【属性】，打开高级系统设置</p></li><li><p>点击【环境变量】，在系统变量下点击新建</p></li><li><p>添加变量名<code>SDK_HOME</code>和变量<code>sdk位置</code></p></li></ul><img src="https://s1.ax1x.com/2020/08/17/dZikUx.png" style="zoom: 50%;"><ul><li>在系统变量里找到变量path，对其进行编辑，win10系统直接在列表中新建path变量：<code>%SDK_HOME%\tools</code> 和 <code>%SDK_HOME%\platform-tools</code>。如果你的系统中path变量为非列表形式，变量之间要用分号<code>；</code>隔开。</li></ul><img src="https://s1.ax1x.com/2020/08/17/dZiPbR.png" style="zoom:67%;"><ul><li>接下来检查SDK是否配置成功，使用 <code>Windows+R</code> 键，再输入cmd启动windows命令行界面，运行命令<code>adb</code>，出现以下信息表示SDK配置成功。</li></ul><img src="https://s1.ax1x.com/2020/08/17/dZiFV1.png" style="zoom: 50%;"><h3 id="3-Gradle的下载与配置"><a href="#3-Gradle的下载与配置" class="headerlink" title="3.Gradle的下载与配置"></a>3.Gradle的下载与配置</h3><ul><li>Android Studio使用Gradle的目的在于帮助开发者管理项目依赖，开发部署，代码复用。</li><li>Gradle是一种构建工具，可以帮助开发者管理项目中的差异，依赖，编译，打包，部署等，可以定义满足自己需要的构建逻辑，写入到build.gradle中供日后复用。</li><li>Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化构建开源工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，目前也增加了基于Kotlin语言的kotlin-based DSL，抛弃了基于XML的各种繁琐配置。</li><li>Gradle是一个基于JVM的构建工具，是一款通用灵活的构建工具，支持maven、Ivy仓库，支持传递性依赖管理，而不需要远程仓库或者是pom.xml和ivy.xml配置文件，基于Groovy，build脚本使用Groovy编写。</li></ul><h4 id="3-1-下载Gradle"><a href="#3-1-下载Gradle" class="headerlink" title="3.1 下载Gradle"></a>3.1 下载Gradle</h4><p>先看需要安装哪个版本的gradle，不同版本的Android Studio应该是对应不同版本的gradle。</p><p>随便打开一个安卓工程，点击<code>Help-&gt;About</code>查看Android Studio版本</p><img src="https://s1.ax1x.com/2020/08/18/dKnVjs.png" style="zoom: 67%;"><img src="https://s1.ax1x.com/2020/08/18/dKnEcj.png" style="zoom:67%;"><p>在工程根目录下打开<code>gradle\wrapper\gradle-wrapper.properties</code>，查看gradle版本，我的是<code>gradle-6.1.1-all.zip</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-6.1.1-all.zip</span></span><br></pre></td></tr></table></figure><p>可在<a href="http://services.gradle.org/distributions/" target="_blank" rel="noopener">gradle主页</a>下载相应版本的压缩包，一般地，在打开一个Android工程，如果没有下载安装gradle，软件会自动联网下载，但通常情况下下载都会非常慢，推荐在网上直接搜索需要的gradle版本进行下载，我是在CSDN下载的，有很多资源，如<a href="https://blog.csdn.net/QasimCyrus/article/details/78457609?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">这个博客</a>。</p><h4 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2 配置"></a>3.2 配置</h4><p>将下载好的gradle压缩包放在<code>C:\Users\ASUS LD\.gradle\wrapper\dists\gradle-6.1.1-all\cfmwm155h49vnt3hynmlrsdst</code>目录下，正常情况下这里面还有<code>.zip.lck和.zip.ok</code>两个文件，并解压缩。</p><img src="https://s1.ax1x.com/2020/08/18/dKni4S.png" style="zoom:67%;"><p>在Files-&gt;Settings中找到Gradle的配置，如果选择了下面的 Use Gradle from Specified location，那么就得检查目录是否设置正确，此时地址是<code>C:\Users\ASUS LD\.gradle\wrapper\dists\gradle-6.1.1-all</code>。</p><img src="https://s1.ax1x.com/2020/08/18/dKnk9g.png" style="zoom: 67%;"><h4 id="3-3-环境变量的添加"><a href="#3-3-环境变量的添加" class="headerlink" title="3.3 环境变量的添加"></a>3.3 环境变量的添加</h4><p>这一步是我在安装的过程中，看到网上有些博主说的，不知道有没有用，反正我添加了…</p><p>在我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;新建系统变量，变量名为<code>GRADLE_HOME</code>，变量值为解压后的gradle文件中的bin目录下。</p><img src="https://s1.ax1x.com/2020/08/18/dKnA3Q.png" style="zoom: 67%;"><img src="https://s1.ax1x.com/2020/08/18/dKnCAf.png" style="zoom:67%;"><p>在Path中添加<code>%GRADLE_HOME%\bin</code>，确定</p><img src="https://s1.ax1x.com/2020/08/18/dKnPN8.png" style="zoom: 67%;"><p>环境变量添加完成。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用语法</title>
      <link href="/2020/08/13/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/08/13/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Markdown"><a href="#什么是Markdown" class="headerlink" title="什么是Markdown"></a>什么是Markdown</h3><p>Markdown是一种<a href="https://baike.baidu.com/item/轻量级标记语言/52671915" target="_blank" rel="noopener">轻量级标记语言</a>，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字。</p><a id="more"></a><p>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，目前许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。</p><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h3><h4 id="1-1-字体设置斜体、粗体、删除线"><a href="#1-1-字体设置斜体、粗体、删除线" class="headerlink" title="1.1 字体设置斜体、粗体、删除线"></a>1.1 字体设置斜体、粗体、删除线</h4><pre><code>语法如下： *这里是文字*   _这里是文字_     //倾斜**这里是文字**                  //加粗***这里是文字***                //倾斜加粗~~这里是文字~~                  //删除线</code></pre><p>效果如下：<br><em>这里是文字</em>   <em>这里是文字</em><br><strong>这里是文字</strong><br><strong><em>这里是文字</em></strong><br><del>这里是文字</del></p><h4 id="1-2-分级标题"><a href="#1-2-分级标题" class="headerlink" title="1.2 分级标题"></a>1.2 分级标题</h4><pre><code>语法如下：# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p>效果如下： </p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="1-3-链接"><a href="#1-3-链接" class="headerlink" title="1.3 链接"></a>1.3 链接</h4><p>语法如下：</p><ul><li>直接显示网址链接：&lt;网址&gt;</li><li>插入超链接：文字+链接网址</li><li>插入图片：见另一篇博客（Markdown添加图片）</li></ul><h4 id="1-4-分割线"><a href="#1-4-分割线" class="headerlink" title="1.4 分割线"></a>1.4 分割线</h4><p>语法如下：<br>在一行中用三个以上的星号(*)、减号(-)、底线(_)来建立一个分隔线，行内不能有其他东西，也可以在星号，或是减号中间插入空格。</p><h4 id="1-5-代码块"><a href="#1-5-代码块" class="headerlink" title="1.5 代码块"></a>1.5 代码块</h4><p>语法如下：</p><ul><li>利用缩进(tab),首行缩进一个字符。</li><li>利用英文 ``` 符号包裹代码。`</li><li><code>行内式：</code>main`</li><li>直接运行html代码</li></ul><h4 id="1-6-引用"><a href="#1-6-引用" class="headerlink" title="1.6 引用"></a>1.6 引用</h4><pre><code>语法如下：1.在被引用的文本前加上&gt;符号，以及一个空格，如果只输入了一个&gt;符号会产生一个空白的引用。2.引用的嵌套使用</code></pre><p>效果如下：</p><blockquote><p>文字</p><blockquote><p>文字</p><blockquote></blockquote></blockquote></blockquote><h4 id="1-7-列表"><a href="#1-7-列表" class="headerlink" title="1.7 列表"></a>1.7 列表</h4><pre><code>语法如下：1.无序列表：使用*，+，-，后加一个空格，再加文字。2.有序列表：使用数字和一个英文句点。3.列表嵌套：上一级和下一级之间敲三个空格即可。</code></pre><p>效果如下：</p><ul><li>列表文字</li></ul><ul><li>列表文字</li></ul><ul><li>列表文字<ul><li>列表文字</li></ul></li></ul><ol><li>列表文字</li><li>列表文字</li><li>列表文字</li><li>列表文字</li></ol><h4 id="1-8-表格"><a href="#1-8-表格" class="headerlink" title="1.8 表格"></a>1.8 表格</h4><pre><code>语法如下：文字|文字|文字 -|-|-  :-:|:-:|:-:  -:|-:|-:  //左对齐 居中 右对齐文字|文字|文字文字|文字|文字</code></pre><p>效果如下：</p><table><thead><tr><th>文字</th><th align="center">文字</th><th align="right">文字</th></tr></thead><tbody><tr><td>文字</td><td align="center">文字</td><td align="right">文字</td></tr><tr><td>文字</td><td align="center">文字</td><td align="right">文字</td></tr></tbody></table><h3 id="2-快捷键"><a href="#2-快捷键" class="headerlink" title="2.快捷键"></a>2.快捷键</h3><table><thead><tr><th align="center">功能</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="center">加粗</td><td align="center">Ctrl+B</td></tr><tr><td align="center">斜体</td><td align="center">Ctrl+I</td></tr><tr><td align="center">引用</td><td align="center">Ctrl+Q</td></tr><tr><td align="center">插入链接</td><td align="center">Ctrl+L</td></tr><tr><td align="center">插入代码</td><td align="center">Ctrl+K</td></tr><tr><td align="center">插入图片</td><td align="center">Ctrl+G</td></tr><tr><td align="center">提升标题</td><td align="center">Ctrl+H</td></tr><tr><td align="center">有序列表</td><td align="center">Ctrl+O</td></tr><tr><td align="center">无序列表</td><td align="center">Ctrl+U</td></tr><tr><td align="center">横线</td><td align="center">Ctrl+R</td></tr><tr><td align="center">撤销</td><td align="center">Ctrl+Z</td></tr><tr><td align="center">重做</td><td align="center">Ctrl+Y</td></tr></tbody></table><h3 id="3-特殊用法"><a href="#3-特殊用法" class="headerlink" title="3.特殊用法"></a>3.特殊用法</h3><p>3.1 制作一份待办事宜<br>    语法如下：<br>    - [ ] 文字      待办<br>        - [x] 文字      已办</p><p>效果如下：</p><ul><li><input disabled type="checkbox"> 文字</li><li><input checked disabled type="checkbox"> 文字  </li></ul><h4 id="3-2-书写公式"><a href="#3-2-书写公式" class="headerlink" title="3.2 书写公式"></a>3.2 书写公式</h4><pre><code>语法如下：$$公式$$</code></pre><h4 id="3-3-绘制流程图"><a href="#3-3-绘制流程图" class="headerlink" title="3.3 绘制流程图"></a>3.3 绘制流程图</h4><pre><code>语法如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure></code></pre><p>效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><h4 id="3-4-绘制序列图"><a href="#3-4-绘制序列图" class="headerlink" title="3.4 绘制序列图"></a>3.4 绘制序列图</h4><pre><code>语法如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure></code></pre><h4 id="3-5-绘制甘特图"><a href="#3-5-绘制甘特图" class="headerlink" title="3.5 绘制甘特图"></a>3.5 绘制甘特图</h4><pre><code>语法如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown添加图片</title>
      <link href="/2020/08/12/Markdown%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/"/>
      <url>/2020/08/12/Markdown%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h4 id="百度Markdown添加图片，看到最多的就是以下这几种方法-各种Markdown编辑器的插图方式也都包含在这几种方法之内。"><a href="#百度Markdown添加图片，看到最多的就是以下这几种方法-各种Markdown编辑器的插图方式也都包含在这几种方法之内。" class="headerlink" title="百度Markdown添加图片，看到最多的就是以下这几种方法,各种Markdown编辑器的插图方式也都包含在这几种方法之内。"></a>百度<code>Markdown添加图片</code>，看到最多的就是以下这几种方法,各种Markdown编辑器的插图方式也都包含在这几种方法之内。</h4><p>插图的基础格式：<code>![text](图片链接 &quot;optional title&quot;)</code></p><blockquote><p>text：图片的Alt标签，用来描述图片的关键词，可以不写。</p><p>图片链接：可以是图片的本地地址或者是网址。</p><p>“optional title”：鼠标悬置于图片上会出现的标题文字，可以不写。</p></blockquote><a id="more"></a><h2 id="1-插入本地图片"><a href="#1-插入本地图片" class="headerlink" title="1.插入本地图片"></a>1.插入本地图片</h2><p>只需要在基础语法的括号中填入图片的位置路径即可，支持绝对路径和相对路径。</p><p>格式为：<code>![text](本地文件路径)</code></p><p><strong>缺点：</strong>不灵活不好分享，本地图片的路径更改或丢失都会造成markdown文件调不出图。</p><h2 id="2-插入网络图片"><a href="#2-插入网络图片" class="headerlink" title="2.插入网络图片"></a>2.插入网络图片</h2><p>只需要在基础语法的括号中填入图片的网络链接即可，现在已经有很多免费/收费图床和方便传图的小工具可选。</p><p>格式为：<code>![text](网络图片路径)</code></p><p><strong>缺点：</strong>将图片存在网络服务器上，非常依赖网络。</p><h2 id="3-把图片存入markdown文件"><a href="#3-把图片存入markdown文件" class="headerlink" title="3.把图片存入markdown文件"></a>3.把图片存入markdown文件</h2><p>用base64转码工具把图片转成一段字符串，然后把字符串填到基础格式中链接的那个位置。</p><p>格式为：<code>![text][base64str]</code></p><p><strong>缺点：</strong>有点麻烦，需要将图片转化为base64字符串，用到Python</p><ul><li>使用python将图片转化为base64字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">f=open(<span class="string">'723.png'</span>,<span class="string">'rb'</span>) <span class="comment">#二进制方式打开图文件</span></span><br><span class="line">ls_f=base64.b64encode(f.read()) <span class="comment">#读取文件内容，转换为base64编码</span></span><br><span class="line">f.close()</span><br><span class="line">print(ls_f)</span><br></pre></td></tr></table></figure><ul><li>base64字符串转化为图片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">bs=<span class="string">'iVBORw0KGgoAAAANSUhEUg....'</span> <span class="comment"># 太长了省略</span></span><br><span class="line">imgdata=base64.b64decode(bs)</span><br><span class="line">file=open(<span class="string">'2.jpg'</span>,<span class="string">'wb'</span>)</span><br><span class="line">file.write(imgdata)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><h2 id="4-利用Github在Markdown中插入图片"><a href="#4-利用Github在Markdown中插入图片" class="headerlink" title="4.利用Github在Markdown中插入图片"></a>4.利用Github在Markdown中插入图片</h2><p>利用GitHub上传图片，并在Markdown中插入是较为稳妥和方便的方法，使用GitHub上传图片，主要分为4步：</p><blockquote><p>1.先注册一个github的帐号</p><p>2.创建一个专门放图片的仓库</p><p>3.上传图片</p><p>4.上传完成后，点击打开图片，右键复制图片链接，加入到Markdown文件中</p></blockquote><p>具体步骤参考这篇<a href="https://blog.csdn.net/u012150360/article/details/78475479" target="_blank" rel="noopener">博客</a>详细介绍，我尝试这种方法在GitHub上传完照片后点击图片显示不出来，按照百度的解决办法操作后，GitHub网站又进不去…放弃了，也不知道图片显示不了的问题解决没，而且向GitHub上传图片的操作有点麻烦，上传完照片每次取连接也不方便。</p><h2 id="5-将图片上传至图床"><a href="#5-将图片上传至图床" class="headerlink" title="5.将图片上传至图床"></a>5.将图片上传至图床</h2><p>把写博客需要的所有图片保存到某个图床服务里，然后获取该图片的网络图床链接写在博客里，就可以显示图片了，相当于插入网络图片。我使用的是<a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a>，提供高速稳定的图片上传和分享服务，而且免费！！！</p><p>步骤如下：</p><p>1.路过图床官网注册账号</p><img src="https://s1.ax1x.com/2020/08/12/axhMRS.png" style="zoom:80%;"><p>2.上传图片到图床</p><p><img src="https://s1.ax1x.com/2020/08/12/ax4bnJ.png" alt></p><p>3.将图片URL链接添加到Markdown文件中就可以显示出图片了</p><p><img src="https://s1.ax1x.com/2020/08/12/ax5FHA.png" alt></p><h4 id="推荐使用这种方法，上传图片方便快捷，可批量上传，上传后的图片一直保存在图床就OK。"><a href="#推荐使用这种方法，上传图片方便快捷，可批量上传，上传后的图片一直保存在图床就OK。" class="headerlink" title="推荐使用这种方法，上传图片方便快捷，可批量上传，上传后的图片一直保存在图床就OK。"></a>推荐使用这种方法，上传图片方便快捷，可批量上传，上传后的图片一直保存在图床就OK。</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客页面美化</title>
      <link href="/2020/08/12/Hexo%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
      <url>/2020/08/12/Hexo%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>原来的界面使用的是<code>yilia</code>主题，下面采用<code>volantis</code>主题进行美化设计，博客主题可在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a>网站下载喜欢的，下载好的压缩包添加到博客文件内的<strong>themes文件夹</strong>中，修改<code>_config.yml</code>文件主题名称，原博客主题界面如下图所示。</p><a id="more"></a><p><img src="https://s1.ax1x.com/2020/08/12/axlUaT.png" alt="原界面"></p><h2 id="一、页面优化"><a href="#一、页面优化" class="headerlink" title="一、页面优化"></a>一、页面优化</h2><h3 id="1-导航栏样式"><a href="#1-导航栏样式" class="headerlink" title="1.导航栏样式"></a>1.导航栏样式</h3><p>在原基础上添加了一个渐变背景。首先在主题配置文件<code>_config.yml</code>中navbar的effext毛玻璃特效（blur）去掉。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">将第<span class="number">5</span>行改成第<span class="number">6</span>行：</span><br><span class="line">navbar:</span><br><span class="line">    <span class="built_in">height</span>: <span class="number">64</span>px</span><br><span class="line">    <span class="built_in">width</span>: <span class="keyword">auto</span> <span class="meta"># auto, max</span></span><br><span class="line">    effect: [shadow, blur] # [shadow, floatable, blur]</span><br><span class="line">    effect: [shadow] # [shadow, floatable]</span><br></pre></td></tr></table></figure><p>在themes\volantis\source\css_layout\navbar.styl中，添加代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">添加第<span class="number">11</span>行代码：</span><br><span class="line">.l_header</span><br><span class="line">  $iconW = <span class="number">32</span>px</span><br><span class="line">  $iconMargin = <span class="number">4</span>px</span><br><span class="line">  <span class="built_in">position</span>: fixed</span><br><span class="line">  z-index: <span class="number">1000</span></span><br><span class="line">  top: <span class="number">0</span></span><br><span class="line">  <span class="built_in">width</span>: <span class="number">100</span>%</span><br><span class="line">  <span class="built_in">height</span>: $navbar-<span class="built_in">height</span></span><br><span class="line">  <span class="built_in">background</span>: $color-card</span><br><span class="line">  <span class="built_in">background</span>-<span class="built_in">image</span>: linear-gradient(to top, #<span class="number">5</span>ee7df <span class="number">0</span>%, #b490ca <span class="number">100</span>%)</span><br><span class="line">  box-shadow: $boxshadow-card</span><br></pre></td></tr></table></figure><p><code>#5ee7df0%, #b490ca100%</code>中的#5ee7df、#b490ca代表两种颜色，从0%到100%渐变，可修改这两个参数改变颜色，免费的CSS渐变背景样式网站——<a href="http://color.oulu.me/" target="_blank" rel="noopener">CSS渐变背景</a>。</p><p>效果如下：</p><p><img src="https://s1.ax1x.com/2020/08/13/axvhq0.png" alt></p><h3 id="2-页面卡片阴影"><a href="#2-页面卡片阴影" class="headerlink" title="2.页面卡片阴影"></a>2.页面卡片阴影</h3><p>在主页面中的文章、侧边栏添加一点阴影，并在鼠标悬停时出现阴影。</p><p>主页文章：在\themes\volantis\source\css\_layout中<code>main.styl</code>文件，找到<code>.post-wrapper</code>属性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">添加<span class="number">5</span><span class="number">-9</span>行代码：</span><br><span class="line">.post-wrapper</span><br><span class="line">    column-<span class="keyword">break</span>-inside: avoid</span><br><span class="line">    <span class="keyword">break</span>-inside: avoid-column</span><br><span class="line">    box-shadow: <span class="number">0</span> <span class="number">1</span>px <span class="number">20</span>px <span class="number">-6</span><span class="function">px <span class="title">rgba</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span></span></span><br><span class="line">    border-radius: 8px</span><br><span class="line">    transition: box-shadow <span class="number">.5</span>s ease</span><br><span class="line">    &amp;:hover</span><br><span class="line">      box-shadow:<span class="number">0</span>px <span class="number">1</span>px <span class="number">20</span>px <span class="number">1</span><span class="function">px <span class="title">rgba</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span></span></span><br></pre></td></tr></table></figure><p>侧边栏：在themes\volantis\source\css_layout中<code>sidebar.styl</code>文件，找到<code>.widget</code>属性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">添加<span class="number">9</span><span class="number">-12</span>行代码：</span><br><span class="line">.widget</span><br><span class="line">  z-index: <span class="number">0</span></span><br><span class="line">  <span class="built_in">background</span>: $color-card</span><br><span class="line">  margin-top: $gap</span><br><span class="line">  border-radius: $border-card</span><br><span class="line">  <span class="built_in">width</span>: <span class="number">100</span>%</span><br><span class="line">  <span class="built_in">display</span>: none</span><br><span class="line">  box-shadow: <span class="number">0</span> <span class="number">1</span>px <span class="number">20</span>px <span class="number">-6</span><span class="function">px <span class="title">rgba</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span></span></span><br><span class="line">  transition: box-shadow .5s ease</span><br><span class="line">  &amp;:hover</span><br><span class="line">    box-shadow:<span class="number">0</span>px <span class="number">1</span>px <span class="number">20</span>px <span class="number">1</span><span class="function">px <span class="title">rgba</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span></span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s1.ax1x.com/2020/08/13/axvfrq.png" alt></p><h3 id="3-页面特效"><a href="#3-页面特效" class="headerlink" title="3.页面特效"></a>3.页面特效</h3><p>在themes\volantis\layout中<code>layout.ejs</code>文件的body里面直接引用，添加<strong>鼠标点击社会主义价值观特效</strong>和<strong>鼠标滑动特效</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">添加<span class="number">7</span>、<span class="number">8</span>行代码：</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;%- partial(<span class="string">'_partial/head'</span>) %&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;%- partial(<span class="string">'_partial/cover'</span>) %&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://cdn.jsdelivr.net/gh/zyoushuo/Blog/hexo/js/clicksocialist.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/g</span>h/zyoushuo/Blog/hexo/js/mouse_slide.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s1.ax1x.com/2020/08/13/axvWMn.png" alt></p><h3 id="4-主页、正文文章标题居中"><a href="#4-主页、正文文章标题居中" class="headerlink" title="4.主页、正文文章标题居中"></a>4.主页、正文文章标题居中</h3><p>在themes\volantis\source\css_layout\main.styl中添加代码，使得主页面的文章、文章正文、关于/友链/留言板等自定义页面的标题居中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">添加第<span class="number">9</span>行代码：</span><br><span class="line">.post-wrapper</span><br><span class="line">    margin-bottom: $gap</span><br><span class="line">    .post</span><br><span class="line">      div.meta</span><br><span class="line">        margin-bottom: $gap</span><br><span class="line">        .title</span><br><span class="line">          font-<span class="built_in">size</span>: $fontsize-h2</span><br><span class="line">+         <span class="built_in">text</span>-align: center</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">添加第<span class="number">5</span>行代码： </span><br><span class="line">.title</span><br><span class="line">    trans(<span class="number">.1</span>s)</span><br><span class="line">    margin: <span class="number">0</span></span><br><span class="line">+   <span class="built_in">text</span>-align: center</span><br><span class="line">    color: $color-<span class="built_in">text</span></span><br></pre></td></tr></table></figure><h3 id="5-修改卡片的内外边距"><a href="#5-修改卡片的内外边距" class="headerlink" title="5.修改卡片的内外边距"></a>5.修改卡片的内外边距</h3><p>在_config.yml文件中找到<code>.gap</code>的设置，添加base值，大小为要设置的内外边距。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">修改代码：</span><br><span class="line">gap:</span><br><span class="line">base: <span class="number">10</span>px</span><br><span class="line">    h2: <span class="number">48</span>px # <span class="function">Spacing above <span class="title">H2</span> <span class="params">(only px unit)</span></span></span><br><span class="line">    h3: 24px # Spacing above H3 (only px unit)</span><br><span class="line">    h4: <span class="number">16</span>px # <span class="function">Spacing above <span class="title">H4</span> <span class="params">(only px unit)</span></span></span><br><span class="line">    line: .51rem # 段落行间距</span><br><span class="line">    <span class="keyword">inline</span>: <span class="number">.5</span>rem # 段落内部行间距</span><br></pre></td></tr></table></figure><h3 id="6-修改侧边栏头像"><a href="#6-修改侧边栏头像" class="headerlink" title="6.修改侧边栏头像"></a>6.修改侧边栏头像</h3><p>在_config.yml文件中找到<code>avatar</code>的设置，将原头像地址改成想要换的头像地址，前提是头像图片是网络图片，大小在150x150适中，形状可在shape处改成圆形或矩形。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># widget library</span></span><br><span class="line">widget:</span><br><span class="line">  blogger:</span><br><span class="line">    <span class="class"><span class="keyword">class</span>:</span> blogger</span><br><span class="line">    <span class="built_in">display</span>: [desktop, mobile] # [desktop, mobile]</span><br><span class="line">    avatar: https:<span class="comment">//s1.ax1x.com/2020/08/13/dS4nTs.png</span></span><br><span class="line">    <span class="meta"># avatar: https:<span class="comment">//cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-NavBar@3x.png</span></span></span><br><span class="line">    shape: rectangle <span class="meta"># circle, rectangle</span></span><br><span class="line">    url: /about/</span><br><span class="line">    title:</span><br><span class="line">    subtitle:</span><br><span class="line">    jinrishici: <span class="literal">true</span> # Poetry Today. You can <span class="built_in">set</span> a <span class="built_in">string</span>, <span class="keyword">and</span> it will be displayed when loading fails.</span><br><span class="line">    social: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>页面中有些地方使用的<strong>小图标</strong>在网站<a href="https://www.thinkcmf.com/font/font_awesome/icons.html" target="_blank" rel="noopener">Font Awesome</a>中获取。</p><h3 id="7-文章末尾版权"><a href="#7-文章末尾版权" class="headerlink" title="7.文章末尾版权"></a>7.文章末尾版权</h3><blockquote><p>参考博客：</p><p>1.<a href="https://lluuiq.com/post/202003171229/?t=1597292966981" target="_blank" rel="noopener">Volantis主题DIY笔记</a></p><p>2.<a href="https://www.zyoushuo.cn/post/1788.html" target="_blank" rel="noopener">hexo之Volantis主题美化</a></p><p>3.</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python入门笔记</title>
      <link href="/2020/08/12/Python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/08/12/Python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Python基本语法元素"><a href="#1-Python基本语法元素" class="headerlink" title="1. Python基本语法元素"></a>1. Python基本语法元素</h2><h3 id="1-1-编译和解释（程序执行的两种方式）"><a href="#1-1-编译和解释（程序执行的两种方式）" class="headerlink" title="1.1 编译和解释（程序执行的两种方式）"></a>1.1 编译和解释（程序执行的两种方式）</h3><ul><li><strong>编译</strong>：将源代码一次性转换成目标代码的过程。</li><li><strong>解释</strong>：将源代码逐条转换成目标代码同时逐条运行的过程。（类似实时的同声传译）</li></ul><p>根据程序这两种执行方式，可以将编程语言分为两类：<strong>静态语言</strong>和<strong>脚本语言</strong>。</p><pre><code>静态语言：C/C++、Java语言等。编译器一次性生成目标代码，优化更充分，程序运行速度更快。脚本语言：Python、JavaScript、PHP等。执行程序时需要源代码，维护更灵活，同时保留源代码可以使程序功能可跨多个操作系统平台运行。</code></pre><a id="more"></a><h3 id="1-2-求解计算问题的精简步骤"><a href="#1-2-求解计算问题的精简步骤" class="headerlink" title="1.2 求解计算问题的精简步骤"></a>1.2 求解计算问题的精简步骤</h3><ul><li>确定IPO：明确计算部分及功能边界。</li><li>编写程序：将计算求解的设计变成现实。</li><li>调试程序：确保程序按照正确逻辑能够正确运行。</li></ul><h3 id="1-3-Python的两种编程方式"><a href="#1-3-Python的两种编程方式" class="headerlink" title="1.3 Python的两种编程方式"></a>1.3 Python的两种编程方式</h3><ul><li><strong>交互式</strong>：对每个输入语句即时运行结果，适合语法练习。</li><li><strong>文件式</strong>：批量执行一组语句并运行结果，是编程的主要方式。</li></ul><h3 id="1-4-实例1：温度转换"><a href="#1-4-实例1：温度转换" class="headerlink" title="1.4 实例1：温度转换"></a>1.4 实例1：温度转换</h3><p>编写程序实现，输入摄氏温度，转换成华氏温度输出，输入华氏温度转换成摄氏温度输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#Tem_change.py</span><br><span class="line">TempStr &#x3D; input (&quot;请输入带有符号的温度值: &quot;)</span><br><span class="line">if TempStr[-1] in [&#39;F&#39;, &#39;f&#39;] :</span><br><span class="line">    C &#x3D; (eval(TempStr[0:-1]) - 32) &#x2F; 1.8</span><br><span class="line">    print(&quot;转换后的温度是&#123;:.2f&#125;C&quot;.format(C))</span><br><span class="line">elif TempStr[-1] in [&#39;C&#39;, &#39;c&#39;] :</span><br><span class="line">    F &#x3D; 1.8 * eval(TempStr[0:-1]) + 32</span><br><span class="line">    print(&quot;转换后的温度是&#123;:.2f&#125;F&quot;.format(F))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;输入格式错误，请重新输入！&quot;)</span><br></pre></td></tr></table></figure><p>分别输入<code>36C</code>、<code>88F</code>，程序输出结果分别为<code>96.80F</code>、<code>31.11C</code>。</p><h3 id="1-5-Pythonn程序语法元素分析"><a href="#1-5-Pythonn程序语法元素分析" class="headerlink" title="1.5 Pythonn程序语法元素分析"></a>1.5 Pythonn程序语法元素分析</h3><ul><li>单行注释：以<code>#</code>开头，其后内容为注释。</li><li>多行注释：以<code>&#39;&#39;&#39;</code>开头和结尾。</li><li>字符串表示：TempStr[-1]表示TempStr字符串的最后一个字符</li><li>切分：TempStr[0:-1]表示TempStr字符串从第一个字符开始但不到最后一个字符</li><li>print函数：例print(“转换后的温度是{:.2f}F”.format(F))，<code>{:.2f}</code>表示槽，后续变量填充到槽中，此处将变量<code>F</code>填充到这个位置并取小数点后两位。</li><li>eval函数（评估函数）：去掉参数最外侧引号并执行余下语句的函数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">&gt;&gt;&gt;eval(&quot;1&quot;)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt;eval(&quot;1+2&quot;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt;eval(&#39;&quot;1+2&quot;&#39;)</span><br><span class="line">&#39;1+2&#39;               #输出只保留单引号</span><br><span class="line">&gt;&gt;&gt;eval(&#39;print(&quot;Hello&quot;)&#39;)</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure></li><li>format函数：一种格式化输出字符串的函数（str.format）,基本语法是通过｛｝和：来代替以前的%。详细参考[format函数之几种常规用法][1]</li></ul><h2 id="2-Python基本图形绘制"><a href="#2-Python基本图形绘制" class="headerlink" title="2. Python基本图形绘制"></a>2. Python基本图形绘制</h2><h3 id="2-1-实例2：Python蟒蛇绘制"><a href="#2-1-实例2：Python蟒蛇绘制" class="headerlink" title="2.1 实例2：Python蟒蛇绘制"></a>2.1 实例2：Python蟒蛇绘制</h3><p>这是Python蟒蛇绘制的全部代码，第2行impor是保留字，引入了一个绘图库turtle。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#Snake_fig.py</span><br><span class="line">import  turtle</span><br><span class="line">turtle.setup(650, 350, 200, 200)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.fd(-250)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pensize(25)</span><br><span class="line">turtle.pencolor(&quot;red&quot;)</span><br><span class="line">turtle.seth(-40)</span><br><span class="line">for i in range(4):</span><br><span class="line">    turtle.circle(40, 80)</span><br><span class="line">    turtle.circle(-40, 80)</span><br><span class="line">turtle.circle(40, 80&#x2F;2)</span><br><span class="line">turtle.fd(40)</span><br><span class="line">turtle.circle(16, 180)</span><br><span class="line">turtle.fd(40 * 2&#x2F;3)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><h3 id="2-2-turtle库的使用"><a href="#2-2-turtle库的使用" class="headerlink" title="2.2 turtle库的使用"></a>2.2 turtle库的使用</h3><p>turtle（海龟）库是turtle绘图体系的Python实现。</p><ul><li>turtle的绘图窗体：<code>turtle.setup(width, height, startx, starty)</code>，setup()设置窗体大小及位置，(startx, starty)两个参数省略系统默认窗口在屏幕正中心。</li><li>前进：<code>turtle.fd(d)</code>，fd() 括号里输入前进距离。</li><li>旋转角度：<code>turtle.seth(angle)</code>，seth()，括号里输入旋转的角度。</li><li>画圆：<code>turtle.circle(r, angle)</code>，表示以当前位置左侧某一点为圆心，进行曲线运动。</li><li>方向控制函数：<code>turtle.seth(angle)</code>，改变行径方向，angle为绝对坐标角度。</li><li>循环语句：<code>for i in range(4):</code>，循环4次，<code>range()</code>函数产生循环计数序列。range(N)即产生0到N-1的整数序列，共N个；range(M,N)产生M到N-1的整数序列，共N-M个。</li><li>done函数：<code>turtle.done()</code>，文件式描写方法中，该函数作为turtle绘制的最后一部分，程序运行之后程序不会退出，需要手工关闭窗体退出。</li></ul><h2 id="3-基本数据类型"><a href="#3-基本数据类型" class="headerlink" title="3. 基本数据类型"></a>3. 基本数据类型</h2><h3 id="3-1-数字类型及操作"><a href="#3-1-数字类型及操作" class="headerlink" title="3.1 数字类型及操作"></a>3.1 数字类型及操作</h3><ul><li>整数类型：<code>pow(x,y)</code>函数，计算x的y次方。</li><li>浮点数类型：带有小数点及小数的数字，浮点数间运算存在不确定尾数（不是bug）。浮点数间运算及比较用<code>round(x,d)</code>函数辅助，对x四舍五入，d是小数截取位数，不确定尾数一般发生在<code>10e-16</code>（aeb表示a*10的b次方）左右。</li><li>复数类型：与数学中复数的概念一致。</li><li>数值运算操作符：</li></ul><table><thead><tr><th align="center">操作符及使用</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">x+y</td><td align="center">加，x与y之和</td></tr><tr><td align="center">x-y</td><td align="center">减，x与y之差</td></tr><tr><td align="center">x*y</td><td align="center">乘，x与y之积</td></tr><tr><td align="center">x/y</td><td align="center">除，x与y之商 10/3结果是3.3333333333333335</td></tr><tr><td align="center">x//y</td><td align="center">整数除，x与y之整数商 10/3结果是3</td></tr><tr><td align="center">+x</td><td align="center">x本身</td></tr><tr><td align="center">-y</td><td align="center">y的负值</td></tr><tr><td align="center">x%y</td><td align="center">余数，模运算 10%3结果是1</td></tr><tr><td align="center">x**y</td><td align="center">幂运算，x的y次幂，当y是小数时为开放运算</td></tr></tbody></table><ul><li>数值运算函数：</li></ul><table><thead><tr><th align="center">函数及使用</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">abs(x)</td><td align="center">绝对值，x的绝对值 abs(-10)结果为10</td></tr><tr><td align="center">divmod(x,y)</td><td align="center">商余，(x//y,x%y)，同时输出商和余数，divmod(10,3)结果为(3,1)</td></tr><tr><td align="center">pow(x,y[,z])</td><td align="center">幂余，(x**y)%z，pow(3,pow(3,99),10000)结果为4587</td></tr><tr><td align="center">round(x,d)</td><td align="center">四舍五入，d是保留小数位数，round(-10.123,2)结果为-10.12</td></tr><tr><td align="center">max(X1,X2,…,Xn)</td><td align="center">最大值，返回X1,X2,…,Xn中最大值，n不限</td></tr><tr><td align="center">min(X1,X2,…,Xn)</td><td align="center">最小值，返回X1,X2,…,Xn中最小值，n不限</td></tr><tr><td align="center">int(x)</td><td align="center">将x变成整数，舍弃小数部分，也可将字符型变成整数</td></tr><tr><td align="center">float(x)</td><td align="center">将x变成浮点数，增加小数部分，也可将字符型变成浮点数</td></tr><tr><td align="center">complex(x)</td><td align="center">将x变成复数，增加虚数部分</td></tr></tbody></table><h3 id="3-2-字符串类型及操作"><a href="#3-2-字符串类型及操作" class="headerlink" title="3.2 字符串类型及操作"></a>3.2 字符串类型及操作</h3><ul><li><p>字符串切片用法：</p><blockquote><p><strong>&lt;字符串&gt;[M:N]</strong>，M缺失表示至开头，N缺失表示至结尾。<br>例：”一二三四五六七八九” [:3]结果是”一二三”<br><strong>&lt;字符串&gt;[M:N:K]</strong>，根据步长K对字符串切片。<br>例：”一二三四五六七八九” [1:8:2]结果是”二四六八”<br>“一二三四五六七八九” [::-1]结果是”九八七六五四三二一”</p></blockquote></li><li><p>字符串操作符：</p><table><thead><tr><th align="center">操作符及使用</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">x+y</td><td align="center">连接两个字符串x和y</td></tr><tr><td align="center">n<em>x 或 x</em>n</td><td align="center">复制n次字符串x</td></tr><tr><td align="center">x in s</td><td align="center">如果x是s的子串，返回True，否则返回False</td></tr></tbody></table></li></ul><ul><li>字符串处理函数：<table><thead><tr><th align="center">函数及使用</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">len(x)</td><td align="center">长度，返回字符串x的长度，len(“一二三456”)结果为6</td></tr><tr><td align="center">str(x)</td><td align="center">任意类型x所对应的字符串形式，str(1.23)—“1.23”，str([1,2])—[1,2]，与eval()函数功能相反。</td></tr><tr><td align="center">hex(x)或oct(x)</td><td align="center">整数x的十六进制或八进制小写形式字符串，hex(425)—“0x1a9”，oct(425)—“0o651”</td></tr><tr><td align="center">chr(u)</td><td align="center">u为Unicode编码，返回其对应的字符</td></tr><tr><td align="center">ord(x)</td><td align="center">x为字符，返回其对应的Unicode编码</td></tr></tbody></table></li></ul><ul><li>字符串处理方法：<table><thead><tr><th align="center">方法及使用</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">str.lower()或str.upper</td><td align="center">返回字符串的副本，全部字符小写/大写，”AbCdEfGh”.lower()结果为”abcdefgh”</td></tr><tr><td align="center">str.split(sep=None)</td><td align="center">返回一个列表，由str根据sep被分隔的部分组成，”A,BC,DEF”.split(“,”)结果为[‘A’,’BC’,’DEF’]</td></tr><tr><td align="center">str.count(x)</td><td align="center">返回子串x在str中出现的次数，”i love you”.count(“o”)结果为2</td></tr><tr><td align="center">str.replace(old,new)</td><td align="center">返回字符串str副本，所有old子串被替换为new，”python”.replace(“n”,”n123.io”)结果为”python123.io”</td></tr><tr><td align="center">str.center(width[,fillchar])</td><td align="center">字符串str根据宽度width居中，fillchar可选，”python”.center(20,”=”)结果为”=======python=======”</td></tr><tr><td align="center">str.strip(chars)</td><td align="center">从str中去掉chars中列出的字符，”= python “.strip(“ np”)结果为”ytho”</td></tr><tr><td align="center">str.join(iter)</td><td align="center">在iter变量除最后元素外每个元素后增加一个str，”,”.join(“12345”)结果为”1,2,3,4,5”</td></tr></tbody></table></li></ul><ul><li>字符串类型的格式化：<br>格式化是对字符串进行格式表达的方式，使用<code>.format()</code>方法,共有6个控制格式，分别为<code>填充</code>、<code>对齐</code>、<code>宽度</code>、<code>,</code>、<code>.精度</code>、<code>类型</code>，用法如下<blockquote><p><strong>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</strong><br>例：<br>“{0:=^20}”.format(“PYTHON”)——“=======PYTHON=======”<br>“{0:<em>&gt;20}”.format(“PYTHON”)——“<strong><strong>*****</strong></strong></em>PYTHON”<br>“{:10}”.format(“PYTHON”)——“PYTHON    “ #默认左对齐<br>“{0:,.2f}”.format(12345.6789)——‘12,345.68’<br>“{0:b},{0:d},{0:o},{0:x},{0:X}”.format(425)——‘110101001,425,651,1a9,1A9’<br>“{0:e},{0:f},{0:%}”.format(3.14)——‘3.140000e+00,3.140000,314.000000%’</p></blockquote></li></ul><h3 id="3-3-time库的使用"><a href="#3-3-time库的使用" class="headerlink" title="3.3 time库的使用"></a>3.3 time库的使用</h3><ul><li>time库基本介绍：是Python中处理时间的标准库。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">time.&lt;b&gt;()</span><br><span class="line">##### time库包括三类函数 #####</span><br><span class="line">1.时间获取：time() ctime() gmtime()</span><br><span class="line">2.时间格式化：strftime() strptime()</span><br><span class="line">3.程序计时：sleep() perf_counter()</span><br></pre></td></tr></table></figure></li><li>时间获取：<table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">time()</td><td align="center">获取当前时间戳，即计算及内部时间值，浮点数，表示从1970年1月1日0:00开始到当前时刻为止以秒为单位的数值，1596959041.034725</td></tr><tr><td align="center">ctime()</td><td align="center">获取当前时间并以易读方式表示，返回字符串，’Sun Aug  9 15:44:30 2020’</td></tr><tr><td align="center">gmtime()</td><td align="center">获取当前时间，表示为计算机可处理的时间格式，time.struct_time(tm_year=2020, tm_mon=8, tm_mday=9, tm_hour=7, tm_min=45, tm_sec=41, tm_wday=6, tm_yday=222, tm_isdst=0)</td></tr></tbody></table></li></ul><ul><li>时间格式化：<table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">strftime(tpl,ts)</td><td align="center">tpl是格式化模板字符串，用来定义输出效果，ts是计算机内部时间类型变量，&gt;&gt;&gt;t=time.gmtime()&gt;&gt;&gt;time.strftime(“%Y-%m-%d %H:%M:%S”,t)输出’2020-08-09 07:52:17’</td></tr><tr><td align="center">strptime(str,tpl)</td><td align="center">str是字符串形式的时间值，tpl是格式化模板字符串，用来定义输入效果，&gt;&gt;&gt;timeStr = ‘2020-08-09 16:03:30’&gt;&gt;&gt;time.strptime(timeStr, “%Y-%m-%d %H:%M:%S”)输出time.struct_time(tm_year=2020, tm_mon=8, tm_mday=9, tm_hour=16, tm_min=3, tm_sec=30, tm_wday=6, tm_yday=222, tm_isdst=-1)</td></tr></tbody></table></li></ul><p>各字符代表的含义如下表所示：</p><table><thead><tr><th align="center">格式化字符串</th><th align="center">日期/时间说明</th><th align="center">格式化字符串</th><th align="center">日期/时间说明</th></tr></thead><tbody><tr><td align="center">%Y</td><td align="center">年份</td><td align="center">%m</td><td align="center">月份（数字）</td></tr><tr><td align="center">%B</td><td align="center">月份名称</td><td align="center">%b</td><td align="center">月份名称缩写</td></tr><tr><td align="center">%d</td><td align="center">日期</td><td align="center">%A</td><td align="center">星期</td></tr><tr><td align="center">%p</td><td align="center">上/下午</td><td align="center">%a</td><td align="center">星期缩写</td></tr><tr><td align="center">%H</td><td align="center">小时（24h制）</td><td align="center">%I</td><td align="center">小时（12h制）</td></tr><tr><td align="center">%M</td><td align="center">分钟</td><td align="center">%S</td><td align="center">秒</td></tr></tbody></table><ul><li>程序计时应用：<table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">perf_counter()</td><td align="center">测量时间函数，返回CPU级别的精确时间计数值，单位为秒，由于计数值起点不确定，连续调用取差值才有意义</td></tr><tr><td align="center">sleep(s)</td><td align="center">产生时间函数，s为休眠的时间，单位秒，可以是浮点数</td></tr></tbody></table></li></ul><h3 id="3-4-实例：文本进度条"><a href="#3-4-实例：文本进度条" class="headerlink" title="3.4 实例：文本进度条"></a>3.4 实例：文本进度条</h3><p>1.文字显示进度，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">scale &#x3D; 10</span><br><span class="line">print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;执行开始&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class="line">for i in range(scale+1):</span><br><span class="line">    a &#x3D; &#39;*&#39; * i</span><br><span class="line">    b &#x3D; &#39;.&#39; * (scale - i)</span><br><span class="line">    c &#x3D; (i&#x2F;scale) * 100</span><br><span class="line">    print(&quot;&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&quot;.format(c,a,b))</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;执行结束&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class="line"></span><br><span class="line">运行效果：</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;执行开始&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> 0 %[-&gt;..........]</span><br><span class="line">10 %[*-&gt;.........]</span><br><span class="line">20 %[**-&gt;........]</span><br><span class="line">30 %[***-&gt;.......]</span><br><span class="line">40 %[****-&gt;......]</span><br><span class="line">50 %[*****-&gt;.....]</span><br><span class="line">60 %[******-&gt;....]</span><br><span class="line">70 %[*******-&gt;...]</span><br><span class="line">80 %[********-&gt;..]</span><br><span class="line">90 %[*********-&gt;.]</span><br><span class="line">100%[**********-&gt;]</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;执行结束&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>2.单行动态刷新，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">for i in range(101):</span><br><span class="line">    print(&quot;\r当前进度&#123;:&#125;%&quot;.format(i), end&#x3D;&quot;&quot;)</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    </span><br><span class="line">运行效果：</span><br><span class="line">当前进度66%     #直到100%</span><br></pre></td></tr></table></figure><p>3.完整版单行动态刷新，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">scale &#x3D; 50</span><br><span class="line">print(&quot;执行开始&quot;.center(scale&#x2F;&#x2F;2, &quot;&#x3D;&quot;))</span><br><span class="line">start &#x3D; time.perf_counter()</span><br><span class="line">for i in range(scale+1):</span><br><span class="line">    a &#x3D; &#39;*&#39; * i</span><br><span class="line">    b &#x3D; &#39;.&#39; * (scale - i)</span><br><span class="line">    c &#x3D; (i&#x2F;scale) * 100</span><br><span class="line">    dur &#x3D; time.perf_counter() - start</span><br><span class="line">    print(&quot;\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;&quot;.format(c,a,b,dur), end&#x3D;&quot;&quot;)</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">print(&quot;\n&quot; + &quot;执行结束&quot;.center(scale&#x2F;&#x2F;2, &quot;&#x3D;&quot;))</span><br><span class="line"></span><br><span class="line">运行效果：</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;执行开始&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">100%[**************************************************-&gt;]5.03</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;执行结束&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h2 id="4-程序的控制结构"><a href="#4-程序的控制结构" class="headerlink" title="4. 程序的控制结构"></a>4. 程序的控制结构</h2><h3 id="4-1-程序的分支结构"><a href="#4-1-程序的分支结构" class="headerlink" title="4.1 程序的分支结构"></a>4.1 程序的分支结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if &lt;条件&gt;:              # :不能漏</span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line">#二(多)分支结构</span><br><span class="line">if &lt;条件&gt;:</span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;语句块2&gt;</span><br></pre></td></tr></table></figure><p>程序的异常处理，结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try :</span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">except :            #可添加异常类型标记，except &lt;异常类型&gt;:</span><br><span class="line">    &lt;语句块2&gt;</span><br><span class="line">    </span><br><span class="line">#例:</span><br><span class="line">try :</span><br><span class="line">    num &#x3D; eval(input(&quot;请输入一个整数:&quot;))</span><br><span class="line">    print(num**2)</span><br><span class="line">except :        #except NameError:  NameError为一种异常类型名称</span><br><span class="line">    print(&quot;输入的不是整数&quot;)</span><br></pre></td></tr></table></figure><h3 id="4-2-程序的循环结构"><a href="#4-2-程序的循环结构" class="headerlink" title="4.2 程序的循环结构"></a>4.2 程序的循环结构</h3><ul><li><p>遍历循环（for循环）：遍历某个结构形式的循环运行方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">for &lt;循环变量&gt; in &lt;遍历结构&gt; :        # : 不能漏</span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line">    </span><br><span class="line">1.计数循环（N次）</span><br><span class="line">for i in range(M,N,K) :             #从M到N，以K为步长</span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line">2.字符串遍历循环</span><br><span class="line">for c in s :</span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line">3.列表遍历循环</span><br><span class="line">for item in ls :</span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line">4.文件遍历循环</span><br><span class="line">for line in fi :</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure></li><li><p>无限循环（while循环）：由条件控制的循环运行方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while &lt;条件&gt; :</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure></li><li><p>循环控制保留字：<code>break</code>和<code>continue</code><br>break：跳出并结束当前整个循环，执行循环后的语句。<br>continue：结束当次循环，继续执行后续次数循环。</p></li></ul><h3 id="4-3-random库的使用"><a href="#4-3-random库的使用" class="headerlink" title="4.3 random库的使用"></a>4.3 random库的使用</h3><p><strong>random库</strong>是使用随机数的Python标准库，用于生成随机数，使用方法<code>import random</code>。<br>基本随机数函数：seed(),random()<br>扩展随机数函数：randint(),getrandbits(),uniform(),randrange(),choice(),shuffle()</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">seed(a=None)</td><td align="center">初始化给定的随机数种子，默认为当前系统时间，&gt;&gt;&gt;random.seed(10)  #产生种子10对应的序列</td></tr><tr><td align="center">random()</td><td align="center">生成一个[0.0,1.0]之间的随机小数，&gt;&gt;&gt;random.random()&gt;&gt;&gt;0.9363138024400508</td></tr><tr><td align="center">randint(a,b)</td><td align="center">生成一个[a,b]之间的整数，&gt;&gt;&gt;random.randint(10,100)&gt;&gt;&gt;51</td></tr><tr><td align="center">randrange(m,n[,k])</td><td align="center">生成一个[m,n]之间以k为步长的随机整数，&gt;&gt;&gt;random.randrange(10,100,10)&gt;&gt;&gt;70</td></tr><tr><td align="center">uniform(a,b)</td><td align="center">生成一个[a,b]之间的随机小数，&gt;&gt;&gt;random.uniform(10,100)&gt;&gt;&gt;46.482745366926494</td></tr><tr><td align="center">getrandbits(k)</td><td align="center">生成一个k比特长的随机整数，&gt;&gt;&gt;random.getrandbits(5)&gt;&gt;&gt;27</td></tr><tr><td align="center">choice(seq)</td><td align="center">从序列seq中随机选择一个元素，&gt;&gt;&gt;random.choice([1,2,3,4,5])&gt;&gt;&gt;3</td></tr><tr><td align="center">shuffle(seq)</td><td align="center">将序列seq中元素随机排列，返回打乱后的顺序，&gt;&gt;&gt;s=[1,2,3,4,5];random.shuffle(s);print(s)&gt;&gt;&gt;[1, 2, 4, 3, 5]</td></tr></tbody></table><h2 id="5-函数和代码复用"><a href="#5-函数和代码复用" class="headerlink" title="5. 函数和代码复用"></a>5. 函数和代码复用</h2><h3 id="5-1-函数的定义与使用"><a href="#5-1-函数的定义与使用" class="headerlink" title="5.1 函数的定义与使用"></a>5.1 函数的定义与使用</h3><ul><li>函数的理解与定义</li></ul><p><strong>函数</strong>是一段代码的表示、是一段具有特定功能的可重用的语句组、是一种功能的抽象、降低编程难度和代码复用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def &lt;函数名&gt;(&lt;参数(0个或多个)&gt;) :</span><br><span class="line">    &lt;函数体&gt;</span><br><span class="line">    return &lt;返回值&gt;</span><br><span class="line">    </span><br><span class="line">例：计算n！</span><br><span class="line">def fact(n) :</span><br><span class="line">    s &#x3D; 1</span><br><span class="line">    for i in range(1, n+1):</span><br><span class="line">        s *&#x3D; i</span><br><span class="line">    return s</span><br></pre></td></tr></table></figure><ul><li>局部变量和全局变量<br>使用规则：</li></ul><p>1.基本数据类型，无论是否重名，局部变量与全局变量不同<br>2.可以通过<code>global</code>保留字在函数内部声明全局变量<br>3.组合数据类型，如果局部变量未真实创建，则是全局变量</p><ul><li>lambda函数</li></ul><p><strong>lambda函数</strong>返回函数名作为结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;函数名&gt; &#x3D; lambda &lt;参数&gt; : &lt;表达式&gt;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">f &#x3D; lambda x, y : x + y</span><br><span class="line">f(10, 15)</span><br><span class="line">25</span><br><span class="line"></span><br><span class="line">f &#x3D; lambda : &quot;lambda函数&quot;</span><br><span class="line">print(f())</span><br><span class="line">lambda函数</span><br></pre></td></tr></table></figure><h3 id="5-2-实例：七段数码管的绘制"><a href="#5-2-实例：七段数码管的绘制" class="headerlink" title="5.2 实例：七段数码管的绘制"></a>5.2 实例：七段数码管的绘制</h3><p>主要是熟悉函数的定义与调用，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">import turtle, time</span><br><span class="line"></span><br><span class="line">def drawGap() :                 #每段数码管添加间隔，更美观</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(5)</span><br><span class="line"></span><br><span class="line">def drawLine(draw) :            #绘制单段数码管</span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.pendown() if draw else turtle.penup()</span><br><span class="line">    turtle.fd(40)</span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.right(90)</span><br><span class="line"></span><br><span class="line">def drawDigit(digit) :          #根据数字绘制七段数码管</span><br><span class="line">    drawLine(True) if digit in [2, 3, 4, 5, 6, 8, 9] else drawLine(False)</span><br><span class="line">    drawLine(True) if digit in [0, 1, 3, 4, 5, 6, 7, 8, 9] else drawLine(False)</span><br><span class="line">    drawLine(True) if digit in [0, 2, 3, 5, 6, 8, 9] else drawLine(False)</span><br><span class="line">    drawLine(True) if digit in [0, 2, 6, 8] else drawLine(False)</span><br><span class="line">    turtle.left(90)</span><br><span class="line">    drawLine(True) if digit in [0, 4, 5, 6, 8, 9] else drawLine(False)</span><br><span class="line">    drawLine(True) if digit in [0, 2, 3, 5, 6, 7, 8, 9] else drawLine(False)</span><br><span class="line">    drawLine(True) if digit in [0, 1, 2, 3, 4, 7, 8, 9] else drawLine(False)</span><br><span class="line">    turtle.left(180)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(20)</span><br><span class="line"></span><br><span class="line"># def drawData(data) :            #获取要输出的数字</span><br><span class="line">#     for i in data :</span><br><span class="line">#         drawDigit(eval(i))      #通过eval()函数将数字变为整数</span><br><span class="line"></span><br><span class="line">def drawData(data) :            #data为日期，格式为&#39;%Y-%m&#x3D;%d+&#39;</span><br><span class="line">    turtle.pencolor(&quot;red&quot;)</span><br><span class="line">    for i in data :</span><br><span class="line">        if i &#x3D;&#x3D; &#39;-&#39; :</span><br><span class="line">            turtle.write(&#39;年&#39;, font&#x3D;(&quot;Arial&quot;, 24, &quot;normal&quot;))</span><br><span class="line">            turtle.pencolor(&quot;green&quot;)</span><br><span class="line">            turtle.fd(40)</span><br><span class="line">        elif i &#x3D;&#x3D; &#39;&#x3D;&#39; :</span><br><span class="line">            turtle.write(&#39;月&#39;, font&#x3D;(&quot;Arial&quot;, 24, &quot;normal&quot;))</span><br><span class="line">            turtle.pencolor(&quot;blue&quot;)</span><br><span class="line">            turtle.fd(40)</span><br><span class="line">        elif i &#x3D;&#x3D; &#39;+&#39; :</span><br><span class="line">            turtle.write(&#39;日&#39;, font&#x3D;(&quot;Arial&quot;, 24, &quot;normal&quot;))</span><br><span class="line">        else:</span><br><span class="line">            drawDigit(eval(i))</span><br><span class="line"></span><br><span class="line">def main() :</span><br><span class="line">    turtle.setup(800, 350, 200, 200)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(-300)</span><br><span class="line">    turtle.pensize(5)</span><br><span class="line">    # drawData(&#39;20200810&#39;)</span><br><span class="line">    drawData(time.strftime(&#39;%Y-%m&#x3D;%d+&#39;, time.gmtime()))</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    turtle.done()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="5-3-代码复用与函数递归"><a href="#5-3-代码复用与函数递归" class="headerlink" title="5.3 代码复用与函数递归"></a>5.3 代码复用与函数递归</h3><ul><li>函数递归的理解：即函数调用函数自身，比如计算阶乘<code>n*(n-1)!</code>。</li><li>函数递归实例：字符串反转<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def rvs(s) :                #字符串反转函数</span><br><span class="line">    if s &#x3D;&#x3D; &quot;&quot; :</span><br><span class="line">        return s</span><br><span class="line">    else :</span><br><span class="line">        return rvs(s[1:])+s[0]</span><br><span class="line"></span><br><span class="line">def main() :</span><br><span class="line">    s &#x3D; input (&quot;请输入字符串: &quot;)</span><br><span class="line">    st &#x3D; rvs(s)</span><br><span class="line">    print(&quot;反转后的字符串为：&#123;&#125;&quot;.format(st))</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line">运行效果：</span><br><span class="line">请输入字符串: 123456789</span><br><span class="line">反转后的字符串为：987654321</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-4-Pyinstaller库的使用"><a href="#5-4-Pyinstaller库的使用" class="headerlink" title="5.4 Pyinstaller库的使用"></a>5.4 Pyinstaller库的使用</h3><p><strong>Pyinstaller库</strong>是第三方库，可将源代码转换成无需源代码的可执行文件。</p><ul><li>安装Pyinstaller库：Windows环境下打开cmd命令行，输入<code>pip install pyinstaller</code>命令，pip指令安装库的时候连接互联网，从互联网上自动下载安装包，并安装执行，安装之后会提示<code>Successfully installed</code>即安装完成。</li><li>Pyinstaller库使用：以七段数码管为例，文件名为<code>seg.py</code>，在该文件所在目录下执行命令<code>pyinstaller -F seg.py</code>,转换成功后在所在文件夹中会新增名为<code>dist</code>文件夹，里面有<code>seg.exe</code>可执行程序，双击即可。</li><li>Pyinstaller库常用参数：</li></ul><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-h</td><td align="center">查看帮助</td></tr><tr><td align="center">–clean</td><td align="center">清理打包过程中的临时文件</td></tr><tr><td align="center">-D</td><td align="center">默认值，生成dist文件夹</td></tr><tr><td align="center">-F</td><td align="center">在dist文件夹中只生成独立的.exe文件（推荐使用）</td></tr><tr><td align="center">-i &lt;图标文件名.ico&gt;</td><td align="center">指定打包程序使用的图标（ico）文件，例：<code>pyinstaller -i xxx.ico -F seg.py</code></td></tr></tbody></table><h2 id="6-组合数据类型"><a href="#6-组合数据类型" class="headerlink" title="6. 组合数据类型"></a>6. 组合数据类型</h2><h3 id="6-1-集合类型及操作"><a href="#6-1-集合类型及操作" class="headerlink" title="6.1 集合类型及操作"></a>6.1 集合类型及操作</h3><ul><li>集合三重点：</li></ul><p>1.集合用大括号<code>{}</code>表示，元素间用逗号分隔<br>2.集合中每个元素唯一，不存在相同元素<br>3.集合元素之间无序</p><ul><li>6个操作符</li></ul><table><thead><tr><th align="center">操作符及应用</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">S1T(1表竖线)</td><td align="center">并，返回一个新集合，包括在集合S和T中的所有元素</td></tr><tr><td align="center">S-T</td><td align="center">差，返回一个新集合，包括在集合S但不在T中的元素</td></tr><tr><td align="center">S&amp;T</td><td align="center">交，返回一个新集合，包括同时在集合S和T中的元素</td></tr><tr><td align="center">S^T</td><td align="center">补，返回一个新集合，包括集合S和T中的非相同元素</td></tr><tr><td align="center">S&lt;=T或S&lt;T</td><td align="center">返回True/False，判断S和T的子集关系</td></tr><tr><td align="center">S&gt;=T或S&gt;T</td><td align="center">返回True/False，判断S和T的包含关系</td></tr></tbody></table><ul><li>集合处理方法</li></ul><table><thead><tr><th align="center">操作函数或方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">S.add(x)</td><td align="center">如果x不在集合S中，将x增加到S</td></tr><tr><td align="center">S.discard(x)</td><td align="center">移除S中元素x，如果x不在集合S中，不报错</td></tr><tr><td align="center">S.remove(x)</td><td align="center">移除S中元素x，如果x不在集合S中，产生KeyError异常</td></tr><tr><td align="center">S.clear()</td><td align="center">移除S中所有元素</td></tr><tr><td align="center">S.pop()</td><td align="center">随机返回S中的一个元素，更新S，若S为空产生KeyError异常</td></tr><tr><td align="center">S.copy()</td><td align="center">返回集合S的一个副本</td></tr><tr><td align="center">len(S)</td><td align="center">返回集合S的元素个数</td></tr><tr><td align="center">x in S</td><td align="center">判断S中元素x，x在集合S中，返回True，否则返回False</td></tr><tr><td align="center">x not in S</td><td align="center">判断S中元素x，x不在集合S中，返回True，否则返回False</td></tr><tr><td align="center">set(x)</td><td align="center">将其他类型变量x转变为集合类型</td></tr></tbody></table><h3 id="6-2-序列类型及操作"><a href="#6-2-序列类型及操作" class="headerlink" title="6.2 序列类型及操作"></a>6.2 序列类型及操作</h3><ul><li><strong>序列类型</strong>：序列是具有先后关系的一组元素</li></ul><p>1.序列是一维元素向量，元素类型可以不同<br>2.元素间由序号引导，通过下标访问序列的特定元素</p><ul><li>6个操作符</li></ul><table><thead><tr><th align="center">操作符及应用</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">x in s</td><td align="center">如果x是序列s的元素，返回True，否则返回False</td></tr><tr><td align="center">x not in s</td><td align="center">如果x是序列s的元素，返回False，否则返回True</td></tr><tr><td align="center">s+t</td><td align="center">连接两个序列s和t</td></tr><tr><td align="center">s<em>n或n</em>s</td><td align="center">将序列s复制n次</td></tr><tr><td align="center">s[i]</td><td align="center">索引，返回s中的第i个元素，i是序列的序号</td></tr><tr><td align="center">s[i:j]或s[i:j:k]</td><td align="center">切片，返回序列s中第i到j以k为步长的元素子序列</td></tr></tbody></table><ul><li>序列类型通用函数和方法</li></ul><table><thead><tr><th align="center">5个函数和方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">len(s)</td><td align="center">返回序列s的长度</td></tr><tr><td align="center">min(s)</td><td align="center">返回序列s的最小元素，s中元素需要可比较</td></tr><tr><td align="center">max(s)</td><td align="center">返回序列s的最大元素，s中元素需要可比较</td></tr><tr><td align="center">s.index(x)或s.index(x,i,j)</td><td align="center">返回序列s从i开始到j位置中第一次出现x的位置</td></tr><tr><td align="center">s.count(x)</td><td align="center">返回序列s中出现x的总次数</td></tr></tbody></table><ul><li><strong>元组类型</strong>：元组是序列类型的一种扩展。</li></ul><p>1.元组是一种序列类型，一旦创建就不能修改<br>2.使用小括号()或tuple()创建，元素间用逗号分隔<br>3.可以使用或不适用小括号</p><ul><li><strong>列表类型</strong>：是序列类型的一种扩展，十分常用。</li></ul><p>1.列表是一种序列类型，创建后可以随意被修改<br>2.使用方括号[]或list()创建，元素间用逗号隔开<br>3.列表中各元素类型可以不同，无长度限制</p><ul><li>列表类型操作函数和方法</li></ul><table><thead><tr><th align="center">函数或方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ls[i]=x</td><td align="center">替换列表ls第i元素为x</td></tr><tr><td align="center">ls[i:j:k]=lt</td><td align="center">用列表lt替换ls切片后所对应元素子列表</td></tr><tr><td align="center">del ls[i]</td><td align="center">删除列表ls中第i元素</td></tr><tr><td align="center">del ls[i:j:k]</td><td align="center">删除列表ls中第i到第j以k为步长的元素</td></tr><tr><td align="center">ls += lt</td><td align="center">更新列表ls，将列表lt元素增加带列表ls中</td></tr><tr><td align="center">ls *= n</td><td align="center">更新列表ls，其元素重复n次</td></tr><tr><td align="center">ls.append(x)</td><td align="center">在列表ls最后增加一个元素x</td></tr><tr><td align="center">ls.clear()</td><td align="center">删除列表ls中所有元素</td></tr><tr><td align="center">ls.copy()</td><td align="center">生成一个新列表，赋值ls中所有元素</td></tr><tr><td align="center">ls.insert(i,x)</td><td align="center">在列表ls的第i位置增加元素x</td></tr><tr><td align="center">ls.pop(i)</td><td align="center">将列表ls中第i位置元素取出并删除该元素</td></tr><tr><td align="center">ls.remove(x)</td><td align="center">将列表ls中出现的第一个元素x删除</td></tr><tr><td align="center">ls.reverse()</td><td align="center">将列表ls中的元素反转</td></tr></tbody></table><h3 id="6-3-字典类型及操作"><a href="#6-3-字典类型及操作" class="headerlink" title="6.3 字典类型及操作"></a>6.3 字典类型及操作</h3><ul><li><strong>字典类型</strong>：是“映射”的体现。</li></ul><p>1.映射是一种键（索引）和值（数据）的对应<br>2.字典是键值对的集合，键值对之间无序<br>3.采用大括号{}和dict()创建，键值对用冒号:表示</p><ul><li>字典类型操作函数和方法</li></ul><table><thead><tr><th align="center">函数或方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">del d[k]</td><td align="center">删除字典d中键k对应的数据值</td></tr><tr><td align="center">k in d</td><td align="center">判断键k(索引)是否在字典d中，如果在返回True，否则返回False</td></tr><tr><td align="center">d.keys()</td><td align="center">返回字典d中所有的键信息</td></tr><tr><td align="center">d.values()</td><td align="center">返回字典d中所有值信息</td></tr><tr><td align="center">d.items()</td><td align="center">返回字典d中所有键值对信息</td></tr><tr><td align="center">d.get(k,’default’)</td><td align="center">键k存在，则返回相应值，不存在则返回’default’值</td></tr><tr><td align="center">d.pop(k,’default’)</td><td align="center">键k存在，则取出相应值，不存在则返回’default’值</td></tr><tr><td align="center">d.popitem()</td><td align="center">随机从字典d中取出一个键值对，以元组形式返回</td></tr><tr><td align="center">d.clear()</td><td align="center">删除所有的键值对</td></tr><tr><td align="center">len(d)</td><td align="center">返回字典d中元素的个数</td></tr></tbody></table><h3 id="6-4-jieba库的使用"><a href="#6-4-jieba库的使用" class="headerlink" title="6.4 jieba库的使用"></a>6.4 jieba库的使用</h3><p><strong>jieba库</strong>：是优秀的中文分词第三方库<br>1.中文文本需要通过分词获得单个的词语<br>2.提供三种分词模式</p><ul><li>安装jieba库：：Windows环境下打开cmd命令行，输入<code>pip install jieba</code>命令，安装之后会提示<code>Successfully installed</code>即安装完成。</li><li>jieba库的使用：<br>三种模式：精确模式、全模式、搜索引擎模式</li></ul><p>1.精确模式（最常用）：把文本精确的切分开，不存在冗余单词<br>2.全模式：把文本中所有可能的词语都扫描出来，有冗余<br>3.搜索引擎模式：在精确模式基础上，对长词再次切分</p><ul><li>jieba库常用函数</li></ul><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">jieba.lcut(s)</td><td align="center">精确模式，返回一个列表类型的分词结果</td></tr><tr><td align="center">jieba.lcut(s,cut_all=True)</td><td align="center">全模式，返回一个列表类型的分词结果，有冗余</td></tr><tr><td align="center">jieba.lcut_for_search(s)</td><td align="center">搜索引擎模式，返回一个列表类型的分词结果，有冗余</td></tr><tr><td align="center">jieba.add_word(w)</td><td align="center">向分词词典增加新词w</td></tr></tbody></table><h3 id="6-5-实例：文本词频统计"><a href="#6-5-实例：文本词频统计" class="headerlink" title="6.5 实例：文本词频统计"></a>6.5 实例：文本词频统计</h3><p>利用jieba库测试<code>smartcity.txt</code>文件的词频，代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import jieba</span><br><span class="line">txt &#x3D; open(&quot;smartcity.txt&quot;, &quot;r&quot;, encoding&#x3D;&quot;utf-8&quot;).read()</span><br><span class="line">words &#x3D; jieba.lcut(txt)</span><br><span class="line">counts &#x3D; &#123;&#125;</span><br><span class="line">for word in words:</span><br><span class="line">    if len(word) &#x3D;&#x3D; 1:</span><br><span class="line">        continue</span><br><span class="line">    else:</span><br><span class="line">        counts[word] &#x3D; counts.get(word, 0) + 1</span><br><span class="line">items &#x3D; list(counts.items())</span><br><span class="line">items.sort(key&#x3D;lambda x:x[1], reverse&#x3D;True)</span><br><span class="line">for i in range(10):         #输出前10</span><br><span class="line">    word, count &#x3D; items[i]</span><br><span class="line">    print(&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;.format(word, count))</span><br><span class="line">    </span><br><span class="line">运行结果：</span><br><span class="line">城市           46</span><br><span class="line">创新           38</span><br><span class="line">智慧           30</span><br><span class="line">社会           16</span><br><span class="line">发展           14</span><br><span class="line">应用           12</span><br><span class="line">形态           11</span><br><span class="line">技术           10</span><br><span class="line">信息技术        9</span><br><span class="line">2.0            9</span><br></pre></td></tr></table></figure><blockquote><p>程序运行过程中一直出现报错<code>ModuleNotFoundError: No module named &#39;jieba&#39;.</code>，重新安装jieba库也不行，最后解决方式：将Python安装路径下<code>D:\Program Files (x86)\Python\Python37\Lib\site-packages</code>的<strong>jieba文件夹</strong>复制到工程目录下，程序运行成功。</p></blockquote><h2 id="7-文件和数据格式化"><a href="#7-文件和数据格式化" class="headerlink" title="7. 文件和数据格式化"></a>7. 文件和数据格式化</h2><h3 id="7-1-文件的使用"><a href="#7-1-文件的使用" class="headerlink" title="7.1 文件的使用"></a>7.1 文件的使用</h3><ul><li>文件：是数据的抽象和集合</li></ul><p>1.文件是存储在辅助存储器上的数据序列<br>2.文件是数据存储的一种形式<br>3.文件展现形式：文本文件和二进制文件</p><ul><li>文件的打开和关闭</li></ul><p>1.<strong>打开文件</strong>：<code>&lt;变量名&gt; = open(&lt;文件名&gt;, &lt;打开模式&gt;)</code><br>文件名包括文件路径和名称，与程序文件同目录可省略路径，例<br><code>&quot;D:/Python/f.txt&quot;、&quot;./Python/f.txt&quot;、&quot;D:\\Python\\f.txt&quot;、&quot;f.txt&quot;</code><br>2.打开模式</p><table><thead><tr><th align="center">文件的打开模式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">‘r’</td><td align="center">只读模式，默认值，如果文件不存在，返回FileNotFoundError</td></tr><tr><td align="center">‘w’</td><td align="center">覆盖写模式，文件不存在则创建，存在则完全覆盖</td></tr><tr><td align="center">‘x’</td><td align="center">创建写模式，文件不存在则创建，存在则返回FileExistsError</td></tr><tr><td align="center">‘a’</td><td align="center">追加写模式，文件不存在则创建，存在则在文件最后追加内容</td></tr><tr><td align="center">‘b’</td><td align="center">二进制文件模式</td></tr><tr><td align="center">‘t’</td><td align="center">文本文件模式，默认值</td></tr><tr><td align="center">‘+’</td><td align="center">与r/w/x/a异同使用，在原功能基础上增加同时读写功能</td></tr></tbody></table><p>3.<strong>关闭文件</strong>：<code>&lt;变量名&gt;.close()</code></p><ul><li>文件内容的读取</li></ul><table><thead><tr><th align="center">操作方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&lt;变量名&gt;.read(size=-1)</td><td align="center">读入全部内容，如果给出参数，读入前size长度</td></tr><tr><td align="center">&lt;变量名&gt;.readline(size=-1)</td><td align="center">读入一行内容，如果给出参数，读入该行前size长度</td></tr><tr><td align="center">&lt;变量名&gt;.readlines(hint=-1)</td><td align="center">读入文件所有行，以每行为元素形成列表，如果给出参数，读入前hint行</td></tr></tbody></table><ul><li>数据的文件写入<table><thead><tr><th align="center">操作方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&lt;变量名&gt;.write(s)</td><td align="center">向文件写入一个字符串或字节流，&gt;&gt;&gt;f.write(“中国是一个伟大的国家！”)</td></tr><tr><td align="center">&lt;变量名&gt;.writelines(lines)</td><td align="center">将一个元素全为字符串的列表写入文件，&gt;&gt;&gt;ls=[“中国”, “法国”, “美国”]&gt;&gt;&gt;f.writelines(ls)&gt;&gt;&gt;中国法国美国</td></tr><tr><td align="center">&lt;变量名&gt;.seek(offset)</td><td align="center">改变当前文件操作指针的位置，offset含义如下：0-文件开头，1-当前位置，2-文件结尾</td></tr></tbody></table></li></ul><p>代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fo &#x3D; open(&quot;output.txt&quot;, &quot;w+&quot;)</span><br><span class="line">sl &#x3D; [&quot;中国&quot;, &quot;法国&quot;, &quot;美国&quot;]</span><br><span class="line">fo.writelines(ls)</span><br><span class="line">fo.seek(0)     #写完之后将文件指针移到文件开头，再进行遍历输出</span><br><span class="line">for line in fo:</span><br><span class="line">    print(line)</span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line">运行效果：</span><br><span class="line">中国法国美国</span><br></pre></td></tr></table></figure><h3 id="7-2-实例：自动轨迹绘制"><a href="#7-2-实例：自动轨迹绘制" class="headerlink" title="7.2 实例：自动轨迹绘制"></a>7.2 实例：自动轨迹绘制</h3><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#AutoTraceDraw.py</span><br><span class="line">import turtle as t</span><br><span class="line">t.title(&#39;自动轨迹绘制&#39;)</span><br><span class="line">t.setup(800, 600, 0, 0)</span><br><span class="line">t.pencolor(&quot;red&quot;)</span><br><span class="line">t.pensize(5)</span><br><span class="line">#数据读取</span><br><span class="line">datals &#x3D; []</span><br><span class="line">f &#x3D; open(&quot;data.txt&quot;)</span><br><span class="line">for line in f:</span><br><span class="line">    line &#x3D; line.replace(&quot;\n&quot;, &quot; &quot;)</span><br><span class="line">    if line !&#x3D; &quot; &quot;:             #eval内参数为空时报错EOF，需加if判断</span><br><span class="line">        datals.append(list(map(eval, line.split(&quot;,&quot;))))</span><br><span class="line">f.close()</span><br><span class="line">#自动绘制</span><br><span class="line">for i in range(len(datals)):</span><br><span class="line">    t.pencolor(datals[i][3], datals[i][4], datals[i][5])</span><br><span class="line">    t.fd(datals[i][0])</span><br><span class="line">    if datals[i][1]:</span><br><span class="line">        t.right(datals[i][2])</span><br><span class="line">    else:</span><br><span class="line">        t.left(datals[i][2])</span><br></pre></td></tr></table></figure><p>程序line13<code>datals.append(list(map(eval, line.split(&quot;,&quot;))))</code>中的eval函数内参数为空时报错，需要加入if判断，eval()语法为：<code>eval(expression[, globals[, locals]])</code>。expression参数不为空。</p><h3 id="7-3-一维数据的格式化处理"><a href="#7-3-一维数据的格式化处理" class="headerlink" title="7.3 一维数据的格式化处理"></a>7.3 一维数据的格式化处理</h3><ul><li>数据组织的维度</li></ul><p><strong>一维数据</strong>：由对等关系的有序或无序数据构成，采用线性方式组织，对应列表、数组和集合等概念。<br><strong>二维数据</strong>：由多个一维数据构成，是一维数据的组合形式，表格是典型的二维数据。<br><strong>多维数据</strong>：由一维或二维数据在新维度上扩展形成。</p><ul><li>一维数据的表示：列表（有序）或集合（无序）。</li><li>一维数据的存储:空格分隔、逗号分隔、特殊符号分隔。</li><li>一维数据的处理：字符串方法<code>.split()和.join()</code>。</li></ul><h3 id="7-4-二维数据的格式化处理"><a href="#7-4-二维数据的格式化处理" class="headerlink" title="7.4 二维数据的格式化处理"></a>7.4 二维数据的格式化处理</h3><ul><li>二维数据的表示：二维列表，每个列表元素又是一个列表。</li><li><strong>CSV</strong>数据存储格式：由逗号分隔值的一种存储方式，每行一个一维数据，采用逗号分隔，无空行。</li><li>二维数据的处理：<code>for循环+.split()和.join()</code>。</li></ul><h3 id="7-5-wordcloud库的使用"><a href="#7-5-wordcloud库的使用" class="headerlink" title="7.5 wordcloud库的使用"></a>7.5 wordcloud库的使用</h3><ul><li><code>wordcloud库</code>是优秀的词云展示第三方库,词云是以词语为基本单位，更加直观和艺术的展示文本。</li><li>安装wordcloud库：：Windows环境下打开cmd命令行，输入<code>pip install wordcloud</code>命令，安装之后会提示<code>Successfully installed</code>即安装完成。安装过程中出现问题，在这个网站<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted下载库文件`wordcloud-1.7.0-cp37-cp37m-win_amd64.whl`，存放在库文件夹中，在该文件夹中执行命令`pip" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted下载库文件`wordcloud-1.7.0-cp37-cp37m-win_amd64.whl`，存放在库文件夹中，在该文件夹中执行命令`pip</a> install wordcloud-1.7.0-cp37-cp37m-win_amd64.whl`即可。</li><li>wordcloud库的使用：</li></ul><p>1.wordcloud.WordCloud()代表一个文本对应的词云<br>2.可以根据文本中词语出现的频率等绘制词云<br>3.绘制词云的形状、尺寸和颜色都可以设定</p><ul><li>wordcloud库常规方法<table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">w.generate(txt)</td><td align="center">向WordCloud对象w中加载文本txt，&gt;&gt;&gt;w.generate(“Python and WordCloud”)</td></tr><tr><td align="center">w.to_file(filename)</td><td align="center">将词云输出为图像文件，.png或.jpg格式，&gt;&gt;&gt;w.to_file(“outfile.png”)</td></tr></tbody></table></li></ul><ul><li>配置对象参数<br><code>w = wordcloud.WordCloud(&lt;参数&gt;)</code><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">width</td><td align="center">指定词云对象生成图片的宽度，默认400像素，&gt;&gt;&gt;w=wordcloud.WordCloud(width=600)</td></tr><tr><td align="center">height</td><td align="center">指定词云对象生成图片的高度，默认200像素，&gt;&gt;&gt;w=wordcloud.WordCloud(height=400)</td></tr><tr><td align="center">min_font_size</td><td align="center">指定词云中字体的最小字号，默认4号，&gt;&gt;&gt;w=wordcloud.WordCloud(min_font_size=10)</td></tr><tr><td align="center">max_font_size</td><td align="center">指定词云中字体的最大字号，根据高度自动调节，&gt;&gt;&gt;w=wordcloud.WordCloud(min_font_size=20)</td></tr><tr><td align="center">font_step</td><td align="center">指定词云中字体字号的步进间隔，默认为1，&gt;&gt;&gt;w=wordcloud.WordCloud(font_step=2)</td></tr><tr><td align="center">font_path</td><td align="center">指定字体文件的路径，默认None，&gt;&gt;&gt;w=wordcloud.WordCloud(font_path=”msyh.ttc”)</td></tr><tr><td align="center">max_words</td><td align="center">指定词云显示的最大单词数量，默认200，&gt;&gt;&gt;w=wordcloud.WordCloud(max_words=20)</td></tr><tr><td align="center">stop_words</td><td align="center">指定词云的排除词列表，即不显示的单词列表，&gt;&gt;&gt;w=wordcloud.WordCloud(stop_words=”Python”)</td></tr><tr><td align="center">mask</td><td align="center">指定词云形状，默认为长方形，需要引用<code>imread()</code>函数，&gt;&gt;&gt;from scipy.misc import imread&gt;&gt;&gt;mk=imread(“pic.png”)&gt;&gt;&gt;w=wordcloud.WordCloud(mask=mk)</td></tr><tr><td align="center">background_color</td><td align="center">指定词云图片的背景颜色，默认为黑色，&gt;&gt;&gt;w=wordcloud.WordCloud(background_color=”White”)</td></tr></tbody></table></li></ul><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.一段英文生成词云</span><br><span class="line">import wordcloud</span><br><span class="line">txt &#x3D; &quot;life is short, you need python&quot;</span><br><span class="line">w &#x3D; wordcloud.WordCloud(background_color&#x3D;&quot;white&quot;)</span><br><span class="line">w.generate(txt)</span><br><span class="line">w.to_file(&quot;ciyun1.png&quot;)</span><br><span class="line"></span><br><span class="line">2.一段中文生成词云</span><br><span class="line">import wordcloud</span><br><span class="line">import jieba</span><br><span class="line">txt &#x3D; &quot;购买自住住房申请住房公积金贷款的，不受缴存时间限制，按缴纳基数计算可贷额度，贷款额度可放宽至最高额度的2倍。&quot;</span><br><span class="line">w &#x3D; wordcloud.WordCloud(width&#x3D;1000, font_path&#x3D;&quot;Alibaba-PuHuiTi-Medium.ttf&quot;, height&#x3D;700)</span><br><span class="line">w.generate(&quot; &quot;.join(jieba.lcut(txt)))</span><br><span class="line">w.to_file(&quot;ciyun2.png&quot;)</span><br><span class="line"></span><br><span class="line">显示中文的字体文件的路径需要 font_path&#x3D;&quot;xxx&quot; 表示出来，或者直接将字体文件放在程序工程文件夹下，最后生成的词云图才会显示汉字。</span><br></pre></td></tr></table></figure><h3 id="7-6-实例：读取文件生成词云"><a href="#7-6-实例：读取文件生成词云" class="headerlink" title="7.6 实例：读取文件生成词云"></a>7.6 实例：读取文件生成词云</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1.读取 suzhou.txt 文件生成词云</span><br><span class="line">import wordcloud</span><br><span class="line">import jieba</span><br><span class="line">f &#x3D; open(&quot;suzhou.txt&quot;, &quot;r&quot;, encoding&#x3D;&quot;utf-8&quot;)</span><br><span class="line">t &#x3D; f.read()</span><br><span class="line">f.close()</span><br><span class="line">ls &#x3D; jieba.lcut(t)</span><br><span class="line">txt &#x3D; &quot; &quot;.join(ls)</span><br><span class="line">w &#x3D; wordcloud.WordCloud(font_path&#x3D;&quot;Alibaba-PuHuiTi-Medium.ttf&quot;, width&#x3D;1000, height&#x3D;700, background_color&#x3D;&quot;white&quot;)</span><br><span class="line">#生成的词云图中最多显示15个词语，通过 max_words&#x3D;xx 设置</span><br><span class="line">#w &#x3D; wordcloud.WordCloud(font_path&#x3D;&quot;Alibaba-PuHuiTi-Medium.ttf&quot;, width&#x3D;1000, height&#x3D;700, background_color&#x3D;&quot;white&quot;, max_words&#x3D;15)</span><br><span class="line">w.generate(txt)</span><br><span class="line">w.to_file(&quot;suzhou_ciyun.png&quot;)</span><br><span class="line"></span><br><span class="line">2.1.读取 suzhou.txt 文件生成词云，并生成特定形状</span><br><span class="line">import wordcloud</span><br><span class="line">import jieba</span><br><span class="line">from scipy.misc import imread</span><br><span class="line">mask &#x3D; imread(&quot;star.png&quot;)</span><br><span class="line">f &#x3D; open(&quot;suzhou.txt&quot;, &quot;r&quot;, encoding&#x3D;&quot;utf-8&quot;)</span><br><span class="line">t &#x3D; f.read()</span><br><span class="line">f.close()</span><br><span class="line">ls &#x3D; jieba.lcut(t)</span><br><span class="line">txt &#x3D; &quot; &quot;.join(ls)</span><br><span class="line">w &#x3D; wordcloud.WordCloud(font_path&#x3D;&quot;Alibaba-PuHuiTi-Medium.ttf&quot;, mask&#x3D;mask, width&#x3D;1000, height&#x3D;700, background_color&#x3D;&quot;white&quot;)</span><br><span class="line">#生成的词云图中最多显示15个词语，通过 max_words&#x3D;xx 设置</span><br><span class="line">#w &#x3D; wordcloud.WordCloud(font_path&#x3D;&quot;Alibaba-PuHuiTi-Medium.ttf&quot;, width&#x3D;1000, height&#x3D;700, background_color&#x3D;&quot;white&quot;, max_words&#x3D;15)</span><br><span class="line">w.generate(txt)</span><br><span class="line">w.to_file(&quot;pic_ciyun.png&quot;)</span><br><span class="line"></span><br><span class="line">安装scipy库和imread库，直接执行命令 pip install xxx ,出问题就提前下好库文件在安装，安装好两个库仍然报错ImportError: cannot import name &#39;imread&#39; from &#39;scipy.misc&#39;，需要降低scipy库，执行命令 pip install scipy&#x3D;&#x3D;1.2.0 问题解决，然后程序中选好特定图像文件，即可生成特定图像的词云。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
